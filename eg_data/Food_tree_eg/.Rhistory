res_dir_cat_asis = "kmeans_Cat_asis"
# Specify the prefix of filenames to be saved.
res_prefix_cat_asis = "VVKAJ_Cat_asis"
# Run elbow, silhouette, and gap methods to find an optimum K (number of clusters).
ChooseK(out.dir= res_dir_cat_asis, out.prefix= res_prefix_cat_asis)
# With specific K values in mind, perform k-means analysis with one specified K.
OneK(myK=3, out.dir= res_dir_cat_asis, out.fn = "VVKAJ_Cat_asis_K3")
# Try multiple Ks and print the biplots in one panel.
MultipleK(myKs = c(3,4,5,6), out.dir = res_dir_cat_asis, out.fn = "VVKAJ_Cat_asis_K3-6")
# Load Cat_asis data.
Tot_m_QCed_Cat_asis <- read.table(file="VVKAJ_Tot_m_QCed_Cat_asis_c_rv.txt", sep="\t", header=T)
# Scale your input file and name it as k-means_input.
kmeans_input <- scale(Tot_m_QCed_Cat_asis)
# Ensure your input file has the correct number of rows and columns.
dim(kmeans_input)
# Specify the directory (folder) to save the results.
res_dir_cat_asis = "kmeans_Cat_asis"
# Specify the prefix of filenames to be saved.
res_prefix_cat_asis = "VVKAJ_Cat_asis"
# Run elbow, silhouette, and gap methods to find an optimum K (number of clusters).
ChooseK(out.dir= res_dir_cat_asis, out.prefix= res_prefix_cat_asis)
# With specific K values in mind, perform k-means analysis with one specified K.
OneK(myK=3, out.dir= res_dir_cat_asis, out.fn = "VVKAJ_Cat_asis_K3")
oneKplot
# Try multiple Ks and print the biplots in one panel.
MultipleK(myKs = c(3,4,5,6), out.dir = res_dir_cat_asis, out.fn = "VVKAJ_Cat_asis_K3-6")
# Try multiple Ks and print the biplots in one panel.
MultipleK(myKs = c(3,4,5,6), out.dir = res_dir_cat_asis, out.fn = "VVKAJ_Cat_asis_K3-6")
# Load Cat_ave data.
Tot_m_QCed_Cat_ave <- read.table(file="VVKAJ_Tot_mean_m_QCed_Cat_ave_c_rv.txt", sep="\t", header=T)
# Scale your input file and name it as k-means_input.
kmeans_input <- scale(Tot_m_QCed_Cat_ave)
# Ensure your input file has the correct number of rows and columns.
dim(kmeans_input)
# Specify the directory (folder) to save the results.
res_dir_cat_ave = "kmeans_Cat_ave"
# Specify the prefix of filenames to be saved.
res_prefix_cat_ave = "VVKAJ_Cat_ave"
# Run elbow, silhouette, and gap methods to find an optimum K (number of clusters).
ChooseK(out.dir= res_dir_cat_ave, out.prefix= res_prefix_cat_ave)
# With specific K values in mind, perform k-means analysis with one specified K.
OneK(myK= 4, out.dir= res_dir_cat_ave, out.fn = "VVKAJ_Cat_ave_K4")
oneKplot
# Try multiple Ks and print the biplots in one panel.
MultipleK(myKs = c(2,3,4,6), out.dir = res_dir_cat_ave, out.fn = "VVKAJ_Cat_ave_K2-4&6")
setwd("~/GitHub/DietR")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Load necessary packages and source scripts
library(ggplot2)
library(factoextra)
library(gridExtra)
library(cluster)
# Set your ggplot2 theme.
theme_set(theme_bw(base_size = 14))
# Import source code to run the analyses to follow.
source("lib/specify_data_dir.R")
source("lib/k-means.R")
# You can come back to the main directory by:
setwd(main_wd)
# ---------------------------------------------------------------------------------------------------------------
# Specify the directory where your data is.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/")
# Your input data should be a data frame with uncorrelated variables with non-zero variance and with no
# missing data.
nut_kmeansinput <- read.table("QCtotal_d_ga_body_meta_glu_comp_2_males60to79_c_Nut_rv.txt",
sep="\t", header=T)
# Ensure your input file has the correct number of rows and columns.
dim(nut_kmeansinput)
# Scale your input file and name it as k-means_input.
kmeans_input <- scale(nut_kmeansinput)
# Specify the directory (folder) to save the results. (create a folder named as this if not done so)
res_dir_nut = "males60to79_Nut_k-means"
# Specify the prefix of filenames to be saved.
res_prefix_nut = "males60to79_Nut"
# Run the elbow, silhouette, and gap methods to find an optimum K (number of clusters).
# Do not alter the name of the input file: kmeans_input. This function below assumes that
# the input is named as "kmeans_input".
# You can only run those three methods for K = 1 through {number of observations - 1}.
# The gap method output will be printed on the Console. The gap values are plotted in
# xxx_gapmethod.pdf.
ChooseK(out.dir= res_dir_nut, out.prefix= res_prefix_nut)
# With specific K values in mind, perform k-means analysis with one specified K.
# Also, change the file name to be saved as a PDF.
# This uses the factoextra package.
OneK(myK= 2, out.dir= res_dir_nut, out.fn = "males60to79_Nut_K2")
oneKplot
# Or try multiple Ks and print respective biplots in one panel.
# Likewise, change the file name to be saved as a PDF as necessary.
# This uses the factoextra and gridExtra packages.
MultipleK(myKs = c(2,3,4,5), out.dir = res_dir_nut, out.fn = "males60to79_Nut_K2-5")
# Your input data should be a data frame with uncorrelated variables with non-zero variance and with no
# missing data.
cat_kmeansinput <- read.table("QCtotal_d_ga_body_meta_glu_comp_2_males60to79_c_Cat_rv.txt",
sep="\t", header=T)
# Ensure your input file has the correct number of rows and columns.
dim(cat_kmeansinput)
# Scale your input file and name it as k-means_input.
kmeans_input <- scale(cat_kmeansinput)
# Specify the directory (folder) to save the results.
res_dir_cat = "males60to79_Cat_k-means"
# Specify the prefix of filenames to be saved.
res_prefix_cat = "males60to79_Cat"
# Run the elbow, silhouette, and gap methods to find an optimum K (number of clusters).
# Do not alter the name of the input file: kmeans_input. This function below assumes that
# the input is named as "kmeans_input".
# You can only run those three methods for K = 1 through {number of observations - 1}.
# The gap method output will be printed on the Console. The gap values are plotted in
# xxx_gapmethod.pdf.
ChooseK(out.dir= res_dir_cat, out.prefix= res_prefix_cat)
# With specific K values in mind, perform k-means analysis with one specified K.
# Also, change the file name to be saved as a PDF.
OneK(myK= 3, out.dir= res_dir_cat, out.fn = "males60to79_Cat_K3")
oneKplot
# Or try multiple Ks and print respective biplots in one panel.
# Likewise, change the file name to be saved as a PDF as necessary.
# This uses the factoextra and gridExtra packages.
MultipleK(myKs = c(2,3,4,5), out.dir = res_dir_cat, out.fn = "males60to79_Cat_K2-5")
MakeFoodTree <- function(nodes_fn, food_database_fn, addl_foods_fn=NULL, output_tree_fn, output_taxonomy_fn, num.levels=5)
{
fdata <- read.table(food_database_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)
nodes <- read.table(nodes_fn, header = TRUE, sep="\t", colClasses="character")
main <- fdata[, c("FoodID", "Main.food.description")]
# add additional food codes
if(!is.null(addl_foods_fn))
for(i in 1:length(addl_foods_fn)){
new.foods <- read.table(addl_foods_fn[i], header=T, sep="\t", colClasses="character")
main <- rbind(main, new.foods[,c("FoodID", "Main.food.description")])
}
# if there happen to be duplicate FoodIDs in main, remove them
main <- main[!duplicated(main$FoodID),]
flevels <- NULL
for(i in 1:num.levels)
flevels <- cbind(flevels, I(substr(main$FoodID, 1, i)))
colnames(flevels) <- paste0("L",1:num.levels)
main <- data.frame(main, flevels, stringsAsFactors=F)
# melt the data, merge to get the node names, then cast back
main.melt <- melt(main, id.vars = "FoodID", variable.name = "Level", value.name = "Level.code")
main.merge <- merge(main.melt, nodes, by = "Level.code")
main.cast <- dcast(main.merge, FoodID ~ Level, value.var = "Main.food.description")
# prepend level to all level descriptions
main.cast[is.na(main.cast)] <- ""
main.cast[, colnames(main.cast)[-1]] <- sapply(colnames(main.cast)[-1],
function(colname) paste(colname, main.cast[,colname], sep="_"))
# merge back with original table to grab Food Description
main.join <- merge(main.cast, main[, c("FoodID", "Main.food.description")], by="FoodID")
# create a proper newick string for the tree
newickstring <- paste("foodtreeroot", apply(main.join, 1, function(xx) paste(xx[-1], collapse="/")), sep="/")
# create a proper taxonomy string for QIIME
taxonomy <- apply(main.join, 1, function(xx) paste(xx[-1], collapse=";"))
final.table <<- data.frame(main.join, newickstring, taxonomy, stringsAsFactors=F)
#### Make and export the tree ####
foodTree <- as.Node(final.table, pathName = "newickstring")
tree <- RecursiveNewickWrite(foodTree)
# Add a semicolon at the end of the tree so that the output_tree_fn will be loaded correctly.
cat(tree, ";", sep = "", file = output_tree_fn)
#### Make and export the taxonomy file ####
export <- final.table[, c('FoodID', 'taxonomy', 'Main.food.description')]
export$Main.food.description <- gsub("_", " ", export$Main.food.description)
write.table(export, output_taxonomy_fn, sep = "\t", quote = FALSE, row.names = FALSE)
}
setwd("~/GitHub/DietR")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# ---------------------------------------------------------------------------------------------------------------
# Load the packages/scripts necessary for tree building.
if (!require("reshape2", quietly = TRUE))install.packages("reshape2")
# Load the data.tree package necessary for newick.tree.r, and if it is not installed, install it.
if (!require("data.tree", quietly = TRUE))install.packages("data.tree")
# Load functions necessary for foodtree building.
source("lib/specify_data_dir.R")
source("lib/Food_tree_scripts/newick.tree.r")
source("lib/Food_tree_scripts/check.db.r")
source("lib/Food_tree_scripts/format.foods_2.r")
source("lib/Food_tree_scripts/filter.db.by.diet.records.r")
source("lib/Food_tree_scripts/make.food.tree.r") # This needs 'newick.tree.r' to be loaded.
source("lib/Food_tree_scripts/make.food.otu.r")
source("lib/Food_tree_scripts/make.fiber.otu.r")
source("lib/Food_tree_scripts/make.dhydrt.otu.r")
# Load the functions necessary to visualize foodtrees.
source("lib/viz_food_tree.r")
# If you have not downloaded and installed the ggtree package yet:
# You can do so by first installing BiocManager (if you have not done so):
if (!require("BiocManager", quietly = TRUE))install.packages("BiocManager")
# Load the functions necessary to visualize foodtrees.
source("lib/viz_food_tree.r")
# You can come back to the main directory by:
setwd(main_wd)
# Move to "Food_tree_eg" directory.
SpecifyDataDirectory(directory.name = "eg_data/Food_tree_eg/")
# Replace special characters such as quotation marks, "%", with "_", and create a new FoodID out of foodcode
# and modcode connected with a period.  The FormatFoods function will leave all other columns intact.
FormatFoods(input_fn= "all.food.desc.txt",
output_fn="all.food.desc_formatted.txt")
FormatFoods(input_fn= "Soylent_codes.txt",
output_fn="Soylent_codes_formatted.txt")
# Replace special characters such as quotation marks, "%", with "_", and create a new FoodID out of foodcode
# and modcode connected with a period.  The FormatFoods function will leave all other columns intact.
FormatFoods(input_fn= "all.food.desc.txt",
output_fn="all.food.desc_formatted.txt")
FormatFoods(input_fn= "Soylent_codes.txt",
output_fn="Soylent_codes_formatted.txt")
MakeFoodTree(nodes_fn=         "NodeLabelsMCT.txt",
food_database_fn= "all.food.desc_formatted.txt",
addl_foods_fn=    "Soylent_codes_formatted.txt",
num.levels= 4,
output_tree_fn=    "Food_tree_all_ASA24/ASA24_4Lv.tree.nwk",
output_taxonomy_fn="Food_tree_all_ASA24/ASA24_4Lv.tax.txt")
# Load the generated food tree. This will load the .nwk file and save it as a tree object called "tree".
# It is OK to see a message saying:
# Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'
tree <- read.tree("Food_tree_all_ASA24/ASA24_4Lv.tree.nwk")
tree
# Prepare node labels of L1 for plotting. It assumes that the tree file has 9 L1 levels.
PrepFoodTreePlots(input.tree=tree)
# Create a color-coded and annotated food tree with nine L1 levels.
# Choose either 'circular' or 'radial' for layout.
# It is OK to see some warning messages about Coordinate system and scale for 'y' already being present.
VizFoodTree(input.tree=tree, layout="radial")
# Look at the color-coded and annotated food tree, saved as annotated_tree.
annotated_tree
# Create a color-coded and annotated food tree with nine L1 levels.
# Choose either 'circular' or 'radial' for layout.
# It is OK to see some warning messages about Coordinate system and scale for 'y' already being present.
VizFoodTree(input.tree=tree, layout="circular")
# Look at the color-coded and annotated food tree, saved as annotated_tree.
annotated_tree
# Save the tree as a PDF file.
ggsave("Food_tree_all_ASA24/ASA24_4Lv.tree.pdf",
annotated_tree, device="png", width=6, height=6, units="in", dpi=300)
setwd("~/GitHub/DietR")
setwd("~/GitHub/DietR")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# ---------------------------------------------------------------------------------------------------------------
# Load the packages/scripts necessary for tree building.
if (!require("reshape2", quietly = TRUE))install.packages("reshape2")
# Load the data.tree package necessary for newick.tree.r, and if it is not installed, install it.
if (!require("data.tree", quietly = TRUE))install.packages("data.tree")
# Load functions necessary for foodtree building.
source("lib/specify_data_dir.R")
source("lib/Food_tree_scripts/newick.tree.r")
source("lib/Food_tree_scripts/check.db.r")
source("lib/Food_tree_scripts/format.foods_2.r")
source("lib/Food_tree_scripts/filter.db.by.diet.records.r")
source("lib/Food_tree_scripts/make.food.tree.r") # This needs 'newick.tree.r' to be loaded.
source("lib/Food_tree_scripts/make.food.otu.r")
source("lib/Food_tree_scripts/make.fiber.otu.r")
source("lib/Food_tree_scripts/make.dhydrt.otu.r")
# You can come back to the main directory by:
setwd(main_wd)
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/")
MakeFoodTree(nodes_fn="../Food_tree_eg/NodeLabelsMCT.txt",
food_database_fn =            "VVKAJ_Items_f_id_s_m_QCed.txt",
addl_foods_fn = NULL,
num.levels = 4,
output_tree_fn =     "Foodtree/VVKAJ_Items_f_id_s_m_QCed_4Lv.tree.nwk",
output_taxonomy_fn = "Foodtree/VVKAJ_Items_f_id_s_m_QCed_4Lv.tax.txt")
# It is OK to see see a warning message:
# In write.table(dhydrt.otu, output_fn, sep = "\t", quote = F, append = TRUE) :
#   appending column names to file
MakeFoodOtu(food_records_fn=  "VVKAJ_Items_f_id_s_m_QCed.txt",
food_record_id =  "SampleID",
food_taxonomy_fn= "Foodtree/VVKAJ_Items_f_id_s_m_QCed_4Lv.tax.txt",
output_fn =       "Foodtree/VVKAJ_Items_f_id_s_m_QCed_4Lv.food.otu.txt")
# Make a food otu table with data in grams of fiber per food
MakeFiberOtu(food_records_fn=  "VVKAJ_Items_f_id_s_m_QCed.txt",
food_record_id=   "SampleID",
food_taxonomy_fn= "Foodtree/VVKAJ_Items_f_id_s_m_QCed_4Lv.tax.txt",
output_fn=        "Foodtree/VVKAJ_Items_f_id_s_m_QCed_4Lv.fiber.otu.txt")
# Make a food otu table as dehydrated grams per kcal.
MakeDhydrtOtu(food_records_fn=  "VVKAJ_Items_f_id_s_m_QCed.txt",
food_record_id =  "SampleID",
food_taxonomy_fn= "Foodtree/VVKAJ_Items_f_id_s_m_QCed_4Lv.tax.txt",
output_fn =       "Foodtree/VVKAJ_Items_f_id_s_m_QCed_4Lv.dhydrt.otu.txt")
# ---------------------------------------------------------------------------------------------------------------
# Come back to the main directory
setwd(main_wd)
setwd("~/GitHub/DietR")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# You can plot foodtrees you generated by using the ggtree package.
# If you have not downloaded and installed the ggtree package yet:
# You can do so by first installing BiocManager (if you have not done so):
if (!require("BiocManager", quietly = TRUE))install.packages("BiocManager")
# Load the functions necessary to set directories.
library(ggtree)
source("lib/specify_data_dir.R")
source("lib/viz_food_tree.r")
# You can come back to the main directory by:
setwd(main_wd)
# ---------------------------------------------------------------------------------------------------------------
# Go to the "Foodtree" directory where the tree files are saved.
SpecifyDataDirectory(directory.name = "eg_data/VVKAJ/Foodtree")
# Load the generated food tree. This will load the .nwk file and save it as a tree object called "tree".
# It is OK to see a message saying:
# Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'
tree <- read.tree("VVKAJ_Items_f_id_s_m_QCed_4Lv.tree.nwk")
# Prepare node labels of L1 for plotting. It assumes that the tree file has 9 L1 levels.
PrepFoodTreePlots(input.tree=tree)
# Create a color-coded and annotated food tree with nine L1 levels.
# Choose either 'circular' or 'radial' for layout.
# It is OK to see some warning messages about Coordinate system and scale for 'y' already being present.
VizFoodTree(input.tree=tree, layout="circular")
# Look at the color-coded and annotated food tree, saved as annotated_tree.
annotated_tree
# Save the tree as a PDF file.
ggsave("VVKAJ_Items_f_id_s_m_QCed_4Lv.tree.pdf",
annotated_tree, device="pdf", width=6, height=6, units="in", dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Come back to the main directory.
setwd(main_wd)
setwd("~/GitHub/DietR")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# ---------------------------------------------------------------------------------------------------------------
# Load the packages/scripts necessary for tree building.
if (!require("reshape2", quietly = TRUE))install.packages("reshape2")
# Load the data.tree package necessary for newick.tree.r, and if it is not installed, install it.
if (!require("data.tree", quietly = TRUE))install.packages("data.tree")
# ---------------------------------------------------------------------------------------------------------------
# Load source scripts
source("lib/specify_data_dir.R")
source("lib/Food_tree_scripts/newick.tree.r")
source("lib/Food_tree_scripts/make.food.tree.r") # This needs 'newick.tree.r' to be loaded.
source("lib/Food_tree_scripts/make.food.otu.r")
source("lib/Food_tree_scripts/make.fiber.otu.r")
source("lib/Food_tree_scripts/make.dhydrt.otu.r")
# You can come back to the main directory by:
setwd(main_wd)
# Specify where the data is.
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data")
# Load the males60to79 people. Note this is a total data (1 row/person).
totals_males60to79 <- read.table("QCtotal_d_ga_body_meta_glu_comp_2_males60to79.txt",
sep="\t", header=T)
# Make the individuals as a vector.
selectedind <- totals_males60to79$SEQN
# Load the input file (all food record data) to be filtered.
all.food.record <- read.table("../Food_D12_FC_QC_demo_QCed.txt", sep="\t", header=T)
# Select only the individuals listed in 'selectedind'.
sel.food.record <- all.food.record[all.food.record$SEQN %in% selectedind, ]
# Confirm the two contains the same set of individuals.
identical(unique(sel.food.record$SEQN), selectedind)
# Save. This will be the input for the following procedures.
write.table(sel.food.record, "Food_D12_FC_QC_demo_QCed_males60to79.txt",
sep="\t", row.names=F, quote=F)
# Create foodtree with the foods classified at a desired level of classification (Lv. 1-6).
# "NodeLabelsMCT.txt" has a list of food levels and names, which comes with the DietR package.
MakeFoodTree(nodes_fn= "../../Food_tree_eg/NodeLabelsMCT.txt",
num.levels = 3,
food_database_fn =            "Food_D12_FC_QC_demo_QCed_males60to79.txt",
addl_foods_fn = NULL,
output_tree_fn =     "Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.nwk",
output_taxonomy_fn = "Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.tax.txt"
)
# Make the standard food otu table with data in gram weights of food.
# For the food_records_fn argument, you need to supply 'sel.food.records' file that have 'FoodAmt' column.
MakeFoodOtu(food_records_fn=  "Food_D12_FC_QC_demo_QCed_males60to79.txt",
food_record_id =  "SEQN",
food_taxonomy_fn= "Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.tax.txt",
output_fn =       "Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.food.otu.txt")
# Make a food otu table with data in grams of fiber per food.
MakeFiberOtu(food_records_fn=  "Food_D12_FC_QC_demo_QCed_males60to79.txt",
food_record_id=   "SEQN",
food_taxonomy_fn= "Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.tax.txt",
output_fn=        "Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.fiber.otu.txt")
# Make a food otu table as dehydrated grams per kcal.
MakeDhydrtOtu(food_records_fn=  "Food_D12_FC_QC_demo_QCed_males60to79.txt",
food_record_id =  "SEQN",
food_taxonomy_fn= "Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.tax.txt",
output_fn =       "Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.dhydrt.otu.txt")
# ---------------------------------------------------------------------------------------------------------------
# Come back to the main directory.
setwd(main_wd)
setwd("~/GitHub/DietR")
# Name your main directory for future use.
main_wd <- file.path(getwd())
setwd("~/GitHub/DietR")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Load source scripts
source("lib/specify_data_dir.R")
source("lib/viz_food_tree.r")
# You can come back to the main directory by:
setwd(main_wd)
# Specify where your data is.
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/Foodtree")
# Load your tree object.
tree <- read.tree("Food_D12_FC_QC_demo_QCed_males60to79_3Lv.nwk")
# Prepare the tree data for visualization.
PrepFoodTreePlots(input.tree = tree)
# Create a color-coded and annotated food tree with 9 L1 levels.
# Choose either 'circular' or 'radial' for layout.
# It is OK to see some warning messages that say:
# Coordinate system already present. Adding new coordinate system, which will replace the existing one.
# Scale for 'y' is already present. Adding another scale for 'y', which will replace the existing scale.
VizFoodTree(input.tree=tree, layout="radial")
# Take a look at the tree.
annotated_tree
# Create a color-coded and annotated food tree with 9 L1 levels.
# Choose either 'circular' or 'radial' for layout.
# It is OK to see some warning messages that say:
# Coordinate system already present. Adding new coordinate system, which will replace the existing one.
# Scale for 'y' is already present. Adding another scale for 'y', which will replace the existing scale.
VizFoodTree(input.tree=tree)
# Create a color-coded and annotated food tree with 9 L1 levels.
# Choose either 'circular' or 'radial' for layout.
# It is OK to see some warning messages that say:
# Coordinate system already present. Adding new coordinate system, which will replace the existing one.
# Scale for 'y' is already present. Adding another scale for 'y', which will replace the existing scale.
VizFoodTree(input.tree=tree, layout = 'inward_circular')
# Take a look at the tree.
annotated_tree
# Create a color-coded and annotated food tree with 9 L1 levels.
# Choose either 'circular' or 'radial' for layout.
# It is OK to see some warning messages that say:
# Coordinate system already present. Adding new coordinate system, which will replace the existing one.
# Scale for 'y' is already present. Adding another scale for 'y', which will replace the existing scale.
VizFoodTree(input.tree=tree, layout = 'circular')
# Take a look at the tree.
annotated_tree
View(VizFoodTree)
setwd("~/GitHub/DietR/")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# ---------------------------------------------------------------------------------------------------------------
# load the necessary packages and the source code.
library(ggplot2)
source("lib/specify_data_dir.R")
source("lib/corr.axes.foods.R")
source("lib/ggplot2themes.R")
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# You can come back to the main directory by:
setwd(main_wd)
# Set working directory.
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/Ordination/")
# CorrAxesFood(food.otu_soted = "../Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.food.otu_sortedbysample.txt",
CorrAxesFood(food.otu_soted = "../Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.food.otu_sorted.txt",
AmountSums.out.fn =          "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_AmountSums.txt",
qval.threshold = 0.05,
meta.users =            "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_meta_users.txt",
corr.axes.foods.outfn = "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_corr_axes_foods_thr0.05.txt")
dat <- read.delim("Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_corr_axes_foods_thr0.05.txt")
# Check the number of food items with significant q-values.
nrow(subset(dat, Significance=="*"))
# There are 37 food items correlated with particular food items.
# Show only food items that are significantly correlated with one of the axes.
subset(dat, Significance=="*")
# It is also possible to view each axis separately.
# Select Axis 1 rows
dat_1 <- subset(dat, Axis=="Axis.1")
head(dat_1[order(dat_1$qval), ], 10)
# Select Axis 2 rows and sort by qval.
dat_2 <- subset(dat, Axis=="Axis.2")
head(dat_2[order(dat_2$qval), ], 10)
# Select Axis 3 rows and sort by qval.
dat_3 <- subset(dat, Axis=="Axis.3")
head(dat_3[order(dat_3$qval), ], 10)
# Select Axis 4 rows and sort by qval.
dat_4 <- subset(dat, Axis=="Axis.4")
head(dat_4[order(dat_4$qval), ], 10)
CorrAxesFood(food.otu_soted = "../Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.food.otu_sorted.txt",
AmountSums.out.fn = "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_AmountSums.txt",
qval.threshold = 0.05,
meta.users =            "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_UNweighted_meta_users.txt",
corr.axes.foods.outfn = "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_UNweighted_corr_axes_foods_thr0.05.txt")
# UNweighted can be viewed in the same way.
dat <- read.delim("Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_UNweighted_corr_axes_foods_thr0.05.txt")
# Check the number of food items with significant q-values.
nrow(subset(dat, Significance=="*"))
# Show the first 10  food items that are significantly correlated with one of the axes.
head(subset(dat, Significance=="*"), 10)
setwd("~/GitHub/DietR")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# ---------------------------------------------------------------------------------------------------------------
# Load the packages/scripts necessary for tree building.
if (!require("reshape2", quietly = TRUE))install.packages("reshape2")
# Load the data.tree package necessary for newick.tree.r, and if it is not installed, install it.
if (!require("data.tree", quietly = TRUE))install.packages("data.tree")
# Load functions necessary for foodtree building.
source("lib/specify_data_dir.R")
source("lib/Food_tree_scripts/newick.tree.r")
source("lib/Food_tree_scripts/check.db.r")
source("lib/Food_tree_scripts/format.foods_2.r")
source("lib/Food_tree_scripts/filter.db.by.diet.records.r")
source("lib/Food_tree_scripts/make.food.tree.r") # This needs 'newick.tree.r' already loaded.
source("lib/Food_tree_scripts/make.food.otu.r")
source("lib/Food_tree_scripts/make.fiber.otu.r")
source("lib/Food_tree_scripts/make.dhydrt.otu.r")
# Load the functions necessary to visualize foodtrees.
source("lib/viz_food_tree.r")
# You can come back to the main directory by:
setwd(main_wd)
# Move to "Food_tree_eg" directory.
SpecifyDataDirectory(directory.name = "eg_data/Food_tree_eg/")
# Replace special characters such as quotation marks, "%", with "_", and create a new FoodID out of foodcode
# and modcode connected with a period.  The FormatFoods function will leave all other columns intact.
FormatFoods(input_fn= "all.food.desc.txt",
output_fn="all.food.desc_formatted.txt")
FormatFoods(input_fn= "Soylent_codes.txt",
output_fn="Soylent_codes_formatted.txt")
MakeFoodTree(nodes_fn=         "NodeLabelsMCT.txt",
food_database_fn= "all.food.desc_formatted.txt",
addl_foods_fn=    "Soylent_codes_formatted.txt",
num.levels= 4,
output_tree_fn=    "Food_tree_all_ASA24/ASA24_4Lv.tree.nwk",
output_taxonomy_fn="Food_tree_all_ASA24/ASA24_4Lv.tax.txt")
