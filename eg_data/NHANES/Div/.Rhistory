main_wd <- file.path(getwd())
# ---------------------------------------------------------------------------------------------------------------
# Install the BiocManager package necessary for installing the phyloseq package.
if (!require("BiocManager",    quietly = TRUE))install.packages("BiocManager")
# Install the phyloseq package if you have not done so.
BiocManager::install("phyloseq")
# Install the devtools package necessary for installing the pairwiseAdonis package.
if (!require("devtools",    quietly = TRUE))install.packages("devtools")
# ---------------------------------------------------------------------------------------------------------------
# load the necessary packages and the source code.
library(vegan)
library(phyloseq)
library(ggplot2)
library(ggtree) # Shows how to cite the ggtree package. Make sure to cite it accordingly.
library(SASxport)
library(cluster) # necessary to the "pairwiseAdonis" package.
library(pairwiseAdonis)
source("lib/specify_data_dir.R")
source("lib/ordination.R")
source("lib/ggplot2themes.R")
source("lib/sort_OTU_by_ID.R")
source("lib/plot.axis.1to4.by.factor.R")
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# You can come back to the main directory by:
setwd(main_wd)
# Set working directory.
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/")
# Food
# Load food OTU table, and sort the columnnames (userID), leaving the last column (taxonomy) intact.
# This dataframe will be saved as "food".
# Also, save "food" as a .txt file to be used in the "correlation between Axes and foods" section.
SortOTUByID(otu.input =           "Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.food.otu.txt",
outfn.for.corr.axis = "Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.food.otu_sorted.txt")
# "food" is a matrix of Food descriptions (rows) x SampleID (columns).
# The column name of "food" is the ordered SEQNs preceded with an 'X'.
head(food)[1:6, 1:4]
# Format the food file and create an otu_table called OTU.
PrepFood(data = food)
# Taxonomy (tax)
# Load taxonomy file generated by the MakeFoodTree function.
tax <- read.delim("Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.tax.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Sample
# Load the demographics data.
demog <- read.xport("../Raw_data/DEMO_I.XPT")
# Load our dataset that has the "GLU_index" information.
glu <- read.delim( file="QCtotal_d_ga_body_meta_glu_comp_2.txt", sep= "\t", header= T )
# Take out only the SEQN and GLU_index.
SEQN_GLU <- glu[, c("SEQN", "GLU_index")]
# Add GLU_index to metadata.
demog_glu <- merge(x=SEQN_GLU, y=demog, all.x=T, by="SEQN")
# Now, it has GLU_index.
head(demog_glu, 2)
# Add 'X' in front of the SEQN and define it as rownames.
rownames(demog_glu) <- paste("X", demog_glu$SEQN, sep="")
# Prep metadata for generating a phyloseq object.
PrepMeta_NHANES(data = demog_glu)
# Foodtree
# Load foodtree file generated by the MakeFoodTree function.
foodtree <- read_tree("Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.nwk")
# It is OK to see a message that says:
# "Found more than one class "phylo" in cache; using the first, from namespace 'phyloseq'
# Also defined by 'tidytree'"
# Format the food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# It is OK to see the same message as the previous line.
# ---------------------------------------------------------------------------------------------------------------
# Create a phyloseq object with OTU, TAX, SAMPLES, and TREE.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# It is OK to see the same message as the previous line. They may appear multiple times.
# Check your metadata by using the functions in the phyloseq package.
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show their metadata.
head(sample_data(phyfoods), n=4)
# Show only the columns (variables) of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s <- tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Change to the folder called "Ordination" in your "Ordination" folder.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/Ordination/")
# ===============================================================================================================
# Perform ordination with WEIGHTED unifrac distance
# ===============================================================================================================
# Perform Principal Coordinate Analysis (PCoA) with WEIGHTED unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) could take a few minutes.
ordinated_w <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=TRUE)
# A warning message may appear saying:
# Warning message:
#   In matrix(tree$edge[order(tree$edge[, 1]), ][, 2], byrow = TRUE,  :
#               data length [xxxx] is not a sub-multiple or multiple of the number of rows [xxxx]
# This warns that the food tree we are using is not bifurcating. But it is OK, since we do not
# expect our food trees to be bifurcating.
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_w <- ordinated_w$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent_w,
output.fn="Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_eigen.txt")
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_w, number.of.axes= 10, meta.data= demog_glu,
output.fn= "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_meta_users.txt")
# Load the output again for plotting.
loaded_glu_w <- read.table("Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_meta_users.txt",
sep="\t", header=T)
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_w$GLU_index <- factor(loaded_glu_w$GLU_index, levels= c("Normal", "Prediabetic", "Diabetic"))
table(loaded_glu_w$GLU_index)
# Load the eigenvalues as a vector.
eigen_loaded <- read.table("Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_eigen.txt", header=T)
# Make a vector that contains the variance explained.
eigen_loaded_vec <- eigen_loaded[, 2]
# ---------------------------------------------------------------------------------------------------------------
# Save Axes 1 & 2, 1 & 3, 2 & 3, 3 & 4, 2 & 4 biplots with and without ellipses with specified confidence interval.
# The reults are saved with filenames with the specified "prefix_AxisXY.pdf" or "prefix_AxisXY_ellipses.pdf".
# You need to supply the same number of colors in the order of the factor level to be used.
# dot.colors are for datapoints, and ellipses.colors are for ellipses outlines.
PlotAxis1to4ByFactor(axis.meta.df    = loaded_glu_w,
factor.to.color = "GLU_index",
eigen.vector    = eigen_percent_w ,
dot.colors      = c("steelblue3", "yellow", "hotpink"),
ellipses.colors = c("steelblue3", "gold3", "hotpink"),
ellipses.cflevel = 0.95,
out.prefix = "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED")
# The GLU_index groups look different. Use beta-diversity and adonis tests to see
# if they are actually distinct from one another.
# Generate a weighted unifrac distance matrix.
dist_matrix_w <- phyloseq::distance(phyfoods, method = "wunifrac") # weighted
# Perform dispersion test.
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr_w <- vegan::betadisper(d=dist_matrix_w, phyloseq::sample_data(phyfoods)$GLU_index)
# Show the centroids and dispersion of each group.
plot(dispr_w)
# Use dispr to do a permutation test for homogeneity of multivariate dispersion
# If p>0.05, the dispersion of each group are not different, and the assumption for adonis is met.
vegan::permutest(dispr_w, perm = 5000)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_w ~ phyloseq::sample_data(phyfoods)$GLU_index, permutations = 5000)
# If overall adonis is significant, you can run pairwise adonis to see which group pairs are different.
pairwise.adonis(dist_matrix_w, phyloseq::sample_data(phyfoods)$GLU_index, perm = 5000,
p.adjust.m = "none")
# Generate and save an WEIGHTED unifrac distance matrix of "Samples".
WeightedUnifracDis(input.phyloseq.obj = phyfoods,
output.fn = "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_uni_dis.txt")
# Perform Principal Coordinate Analysis (PCoA) with UNweighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated_u <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=FALSE)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_u <- ordinated_u$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent_u,
output.fn="Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_UNweighted_eigen.txt")
# ===============================================================================================================
# Plot your ordination results - UNweighted
# ===============================================================================================================
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_u, number.of.axes= 10, meta.data= demog_glu,
output.fn= "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_UNweighted_meta_users.txt")
# Load the output again for plotting.
loaded_glu_u <- read.table("Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_UNweighted_meta_users.txt",
sep="\t", header=T)
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_u$GLU_index <- factor(loaded_glu_u$GLU_index, levels = c("Normal", "Prediabetic", "Diabetic"))
# Take a look at meta_usersdf_loaded.
head(loaded_glu_u, 2)
# ---------------------------------------------------------------------------------------------------------------
# Save Axes 1 & 2, 1 & 3, 2 & 3, 3 & 4, 2 & 4 biplots with and without ellipses with specified confidence interval.
# The reults are saved with filenames with the specified "prefix_AxisXY.pdf" or "prefix_AxisXY_ellipses.pdf".
# You need to supply the same number of colors in the order of the factor level to be used.
# dot.colors are for datapoints, and ellipses.colors are for ellipses outlines.
# [NOTE] For the "UNweighted" results, change the input, eigen vectors, and prefix names accordingly.
PlotAxis1to4ByFactor(axis.meta.df    = loaded_glu_u,
factor.to.color = "GLU_index",
eigen.vector    = eigen_percent_u ,
dot.colors      = c("steelblue3", "yellow", "hotpink"),
ellipses.colors = c("steelblue3", "gold3", "hotpink"),
ellipses.cflevel = 0.95,
out.prefix = "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_UNweighted")
# ---------------------------------------------------------------------------------------------------------------
# Permanova tests
# It is not clear from the plots whether The GLU_index groups are different. Use beta-diversity and adonis
# tests to see if they are they actually distinct from one another.
# Generate an UNweighted unifrac distance matrix.
dist_matrix_u <- phyloseq::distance(phyfoods, method="unifrac")  # UNweighted
# Perform dispersion test.
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr_u <- vegan::betadisper(dist_matrix_u, phyloseq::sample_data(phyfoods)$GLU_index)
# Can show the centroids and dispersion of each group.
plot(dispr_u)
# Use dispr to do a permutation test for homogeneity of multivariate dispersion.
vegan::permutest(dispr_u)
# If p>0.05, the dispersion of each group are not different, and the assumption for adonis is met.
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index, permutations = 5000)
# If overall adonis is significant, you can run pairwise adonis to see which group pairs are different.
pairwise.adonis(dist_matrix_u, phyloseq::sample_data(phyfoods)$GLU_index, perm = 5000,
p.adjust.m = "none")
# ===============================================================================================================
# Save unifrac distance (UNweighted or WEIGHTED) matrices
# ===============================================================================================================
# Generate and save an UNweighted unifrac distance matrix of "Samples".
UnweightedUnifracDis(input.phyloseq.obj = phyfoods,
output.fn = "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_UNweighted_uni_dis.txt")
# ---------------------------------------------------------------------------------------------------------------
# Come back to the main directory.
setwd(main_wd)
setwd("~/GitHub/DietR")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# load the necessary packages.
library(ggplot2)
# Load necessary functions and ggplot formatting themes
source("lib/specify_data_dir.R")
source("lib/ggplot2themes.R")
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# You can come back to the main directory by:
setwd(main_wd)
# Change to the folder called "Ordination".
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/Ordination/")
# Read in the metadata and users' Axis values.
loaded_glu_w <- read.table("Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_meta_users.txt",
sep="\t", header=T)
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_w$GLU_index <- factor(loaded_glu_w$GLU_index, levels= c("Normal", "Prediabetic", "Diabetic"))
# Load the eigenvalues as a vector.
eigen_loaded <- read.table("Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_eigen.txt", header=T)
# Make a vector that contains the variance explained.
eigen_loaded_vec <- eigen_loaded[, 2]
# ---------------------------------------------------------------------------------------------------------------
# Highlight certain sample(s) - e.g. participants 83755 and 83820.
# Subset datapoint(s) that you would like to highlight.
select_point <- subset(loaded_glu_w, SEQN=="83755" | SEQN=="83820" )
# Plot participants in different colors, then plot the selected participants (SEQNs) above with a thicker outline.
highlighted <- ggplot() +
# Plot all the datapoints first.
geom_point(loaded_glu_w, shape=21, size=3, alpha=1, colour="black",
mapping=aes(x=Axis.1, y=Axis.2, fill=GLU_index)) +
scale_fill_manual(values = c("steelblue3", "yellow", "hotpink")) +
xlab( paste("Axis.1 (", paste(round(eigen_loaded_vec[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_loaded_vec[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1) +
# Add thicker outlined datapoints of selected individuals.
geom_point(select_point, shape=21, size=3, alpha=1, stroke=2, color="black",
mapping=aes(x=Axis.1, y=Axis.2, fill= GLU_index), show.legend=F) +
# Add a caption to explain the highlighted datapoint(s).
labs(caption="SEQN 83755 and 83820 are highlighted with a thick outline.") +
theme(plot.caption =  element_text(hjust=1, face="italic"))
highlighted
ggsave("Viz_Ordination/Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_Axis12_highlighted.png",
highlighted, device="png", width=7, height=5.5, unit="in", dpi=300)
# ---------------------------------------------------------------------------------------------------------------
# Come back to the main directory.
setwd(main_wd)
setwd("~/GitHub/DietR")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# load the necessary packages.
library(ggplot2)
# Load necessary functions and ggplot formatting themes
source("lib/specify_data_dir.R")
source("lib/ggplot2themes.R")
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# You can come back to the main directory by:
setwd(main_wd)
# ===============================================================================================================
# Load ordination results - whether weighted or unweighted Unifrac distance results.
# ===============================================================================================================
# Change to the folder called "Ordination".
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/Ordination/")
# Read in the metadata and users' Axis values.
loaded_glu_w <- read.table("Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_meta_users.txt",
sep="\t", header=T)
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_w$GLU_index <- factor(loaded_glu_w$GLU_index, levels= c("Normal", "Prediabetic", "Diabetic"))
# Load the eigenvalues as a vector.
eigen_loaded <- read.table("Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_eigen.txt", header=T)
# Make a vector that contains the variance explained.
eigen_loaded_vec <- eigen_loaded[, 2]
# Create a folder called "Viz_Ordination" to save the plots to be produced here.
# ---------------------------------------------------------------------------------------------------------------
# Highlight certain sample(s) - e.g. participants 83755 and 83820.
# Subset datapoint(s) that you would like to highlight.
select_point <- subset(loaded_glu_w, SEQN=="83755" | SEQN=="83820" )
# Plot participants in different colors, then plot the selected participants (SEQNs) above with a thicker outline.
highlighted <- ggplot() +
# Plot all the datapoints first.
geom_point(loaded_glu_w, shape=21, size=3, alpha=1, colour="black",
mapping=aes(x=Axis.1, y=Axis.2, fill=GLU_index)) +
scale_fill_manual(values = c("steelblue3", "yellow", "hotpink")) +
xlab( paste("Axis.1 (", paste(round(eigen_loaded_vec[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_loaded_vec[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1) +
# Add thicker outlined datapoints of selected individuals.
geom_point(select_point, shape=21, size=3, alpha=1, stroke=2, color="black",
mapping=aes(x=Axis.1, y=Axis.2, fill= GLU_index), show.legend=F) +
# Add a caption to explain the highlighted datapoint(s).
labs(caption="SEQN 83755 and 83820 are highlighted with a thick outline.") +
theme(plot.caption =  element_text(hjust=1, face="italic"))
highlighted
ggsave("Viz_Ordination/Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_Axis12_highlighted.pdf",
highlighted, device="pdf", width=7, height=5.5, unit="in", dpi=300)
setwd("~/GitHub/DietR/")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# ---------------------------------------------------------------------------------------------------------------
# load the necessary packages and the source code.
library(ggplot2)
source("lib/specify_data_dir.R")
source("lib/corr.axes.foods.R")
source("lib/ggplot2themes.R")
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("lib/distinct100colors.rda")
# You can come back to the main directory by:
setwd(main_wd)
# Set working directory.
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/Ordination/")
CorrAxesFood(food.otu_soted = "../Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.food.otu_sortedbysample.txt",
AmountSums.out.fn =          "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_AmountSums.txt",
qval.threshold = 0.05,
meta.users =            "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_meta_users.txt",
corr.axes.foods.outfn = "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_corr_axes_foods_thr0.05.txt")
CorrAxesFood(food.otu_soted = "../Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.food.otu_sorted.txt",
AmountSums.out.fn =          "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_AmountSums.txt",
qval.threshold = 0.05,
meta.users =            "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_meta_users.txt",
corr.axes.foods.outfn = "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_corr_axes_foods_thr0.05.txt")
dat <- read.delim("Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_WEIGHTED_corr_axes_foods_thr0.05.txt")
# Check the number of food items with significant q-values.
nrow(subset(dat, Significance=="*"))
# Check the number of food items with significant q-values.
nrow(subset(dat, Significance=="*"))
# There are 37 food items correlated with particular food items.
# Show only food items that are significantly correlated with one of the axes.
subset(dat, Significance=="*")
# It is also possible to view each axis separately.
# Select Axis 1 rows
dat_1 <- subset(dat, Axis=="Axis.1")
head(dat_1[order(dat_1$qval), ], 10)
# Select Axis 2 rows and sort by qval.
dat_2 <- subset(dat, Axis=="Axis.2")
head(dat_2[order(dat_2$qval), ], 10)
# Select Axis 3 rows and sort by qval.
dat_3 <- subset(dat, Axis=="Axis.3")
head(dat_3[order(dat_3$qval), ], 10)
# Select Axis 4 rows and sort by qval.
dat_4 <- subset(dat, Axis=="Axis.4")
head(dat_4[order(dat_4$qval), ], 10)
CorrAxesFood(food.otu_soted = "../Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.food.otu_sortedbysample.txt",
AmountSums.out.fn = "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_AmountSums.txt",
qval.threshold = 0.05,
meta.users =            "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_UNweighted_meta_users.txt",
corr.axes.foods.outfn = "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_UNweighted_corr_axes_foods_thr0.05.txt")
CorrAxesFood(food.otu_soted = "../Foodtree/Food_D12_FC_QC_demo_QCed_males60to79_3Lv.food.otu_sorted.txt",
AmountSums.out.fn = "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_AmountSums.txt",
qval.threshold = 0.05,
meta.users =            "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_UNweighted_meta_users.txt",
corr.axes.foods.outfn = "Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_UNweighted_corr_axes_foods_thr0.05.txt")
# UNweighted can be viewed in the same way.
dat <- read.delim("Food_D12_FC_QC_demo_QCed_males60to79_3Lv_ord_UNweighted_corr_axes_foods_thr0.05.txt")
# Check the number of food items with significant q-values.
nrow(subset(dat, Significance=="*"))
# Show the first 10  food items that are significantly correlated with one of the axes.
head(subset(dat, Significance=="*"), 10)
# ---------------------------------------------------------------------------------------------------------------
# Come back to the main directory.
setwd(main_wd)
# Set your working directory to the main directory.
# Session --> Set working directory --> Choose directory.
setwd("~/GitHub/DietR")
# Name your main directory for future use.
main_wd <- file.path(getwd())
library(vegan)
source("lib/specify_data_dir.R")
source("lib/diversity_nth_tile.R")
# Load source scripts to build foodtrees and OTU tables.
source("lib/specify_data_dir.R")
source("lib/Food_tree_scripts/newick.tree.r")
source("lib/Food_tree_scripts/make.food.tree.r")
source("lib/Food_tree_scripts/make.food.otu.r")
source("lib/Food_tree_scripts/make.fiber.otu.r")
source("lib/Food_tree_scripts/make.dhydrt.otu.r")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/NHANES")
# Load averaged totals data, nutrition & food categories with demographic, gender-age, body measurements, and
# metadata. From line 118 in 04_add_meta_GLU_index_NHANES.R.
totals <- read.delim("Total_D12_FC_QC_mean_QC_demo_ga_body_meta.txt")
# This should have 4,207 people.
nrow(totals)
# Load the food items data where QC-ed individuals were removed based on their totals data.
food <- read.delim("Food_D12_FC_QC_demo_QCed.txt", sep= "\t", header=T)
# Count the number of unique SEQNs. There should be 4207 people.
length(unique(food$SEQN))
# Here, we are interested in food items with their foodcode tarting from 4; nuts/seeds/legumes.
# Select only the rows that contain those food items.
food4s <- subset(food, Food_code > 39999999 & Food_code < 50000000)
# Check that the subsetted data only contains 4xxxxxxxs.
summary(food4s$Food_code)
# Check the summary of the subset data.
paste(length(unique(food4s$SEQN)), "people consumed",
nrow(food4s), "food items with duplicates.",
"There are", length(unique(food4s$Food_code)), "unique food items.")
# Save as a txt file.
write.table(food4s, "Div/Food_D12_FC_QC_demo_QCed_4s.txt", sep= "\t", row.names=F,quote=F)
# Specify where the data is.
SpecifyDataDirectory("eg_data/NHANES/Div")
MakeFoodTree(nodes_fn="../../Food_tree_eg/NodeLabelsMCT.txt",
addl_foods_fn = NULL,
num.levels = 3,
food_database_fn =            "Food_D12_FC_QC_demo_QCed_4s.txt",
output_tree_fn =     "Foodtree/Food_D12_FC_QC_demo_QCed_4s_3Lv.nwk",
output_taxonomy_fn = "Foodtree/Food_D12_FC_QC_demo_QCed_4s_3Lv.tax.txt"
)
# --------------------------------------------------------------------------------------------------------------
# Generate OTU tables for downstream analyses; IT MAY TAKE SOME TIME.
# It is OK to see the following warning message:
# In write.table(fiber.otu, output_fn, sep = "\t", quote = F, append = TRUE) :
# appending column names to file.
MakeFoodOtu(food_records_fn=  "Food_D12_FC_QC_demo_QCed_4s.txt",
food_record_id =  "SEQN",                              # The ID of your participants
food_taxonomy_fn= "Foodtree/Food_D12_FC_QC_demo_QCed_4s_3Lv.tax.txt",       # Your taxonomy file produced by MakeFoodTree.
output_fn =       "Foodtree/Food_D12_FC_QC_demo_QCed_4s_3Lv.food.otu.txt")  # Output otu file to be saved.
# Load the generated OTU table.
otu <- read.delim("Foodtree/Food_D12_FC_QC_demo_QCed_4s_3Lv.food.otu.txt")
# It should have the dimension of number of unique foods x (1 food column + number of people + 1 taxonomy column).
# 243 x 2110, in this case.
dim(otu)
# The column names have "X." at the beginning. We will take care of it later.
otu[1:4, 1:4]
# Take out the foodID (description) and taxonomy from otu.
otu2 <- otu[, 2: (ncol(otu)-1) ]
# transpose so that the SEQN will come to rows.
otu2t <- as.data.frame(t(otu2))
# Add taxonomy as the column names of otu2t.
colnames(otu2t) <- otu$X.FOODID
# Make a table to save results.
SEQNdiv <- as.data.frame(matrix(nrow = nrow(otu2t) , ncol = 4))
colnames(SEQNdiv) <- c("SEQN", "Shannon", "Simpson", "Invsimpson")
for( i in 1: nrow(otu2t) ){
SEQNdiv[i, 1] <- rownames(otu2t)[i]
SEQNdiv[i, 2] <- diversity(otu2t[i, ], 'shannon')
SEQNdiv[i, 3] <- diversity(otu2t[i, ], 'simpson')
SEQNdiv[i, 4] <- diversity(otu2t[i, ], 'invsimpson')
}
head(SEQNdiv)
# There should be no NA values.
table(is.na(SEQNdiv), useNA="always")
# Plot histograms of each of the diversity measures.
par(mfrow = c(2, 2))
hist(SEQNdiv$Shannon, main="Shannon diversity", xlab="", breaks=10)
hist(SEQNdiv$Simpson, main="Simpson diversity", xlab="", breaks=10)
hist(SEQNdiv$Invsimpson, main="Invsimpson diversity", xlab="", breaks=10)
par(mfrow = c(1, 1))
# Remove the "X" in the SEQNdiv$SEQN for merging.
SEQNdiv$SEQN <- gsub(SEQNdiv$SEQN, pattern = "X", replacement = "")
# First, need to add the diversity values to totals. Only take the rows present in both datasets.
totals_div <- merge(totals, SEQNdiv, by='SEQN')
# ---------------------------------------------------------------------------------------------------------------
# Select individuals whose diversity score is > 0, and group them into groups lower and upper (2-tiles)
# based on their Shannon's diversity measure.
DivNthTile(input= totals_div, div.var="Shannon", nth.tile=2)
# Define Div1 and Div2.
out$DivGroup <-
ifelse(
out$Div == 1,
out$DivGroup <- 'Div1',
out$DivGroup <- 'Div2'
)
# Select only the SEQN and DivGroup.
SEQN_Div12 <- out[, c("SEQN", "DivGroup")]
# Define Div0. ----------------------------------------
# Subset those that have Shannon index =0.
totals_div_zero <- subset(totals_div, Shannon == 0)
# Add DivGroup variable, and insert "Div0".
totals_div_zero$DivGroup <- 'Div0'
# Select only the SEQN and DivGroup.
SEQN_Div0 <- totals_div_zero[, c("SEQN", "DivGroup")]
# Define DivNA. ----------------------------------------
# Define "Not in" function.  By default it's not existent.
`%!in%` <- Negate(`%in%`)
# Subset those that are not in SEQNdiv.
# those are the ones that did not consume nuts/seeds/legumes.
totals_not_in_SEQNdiv <- totals[totals$SEQN %!in% SEQNdiv$SEQN, ]
# Add DivGroup variable, and insert "DivNA".
totals_not_in_SEQNdiv$DivGroup <- 'DivNA'
# Take only the SEQN and DivGroup.
SEQN_DivNA <- totals_not_in_SEQNdiv[, c("SEQN", "DivGroup")]
# ---------------------------------------------------------------------------------------------------------------
# Combine SEQN_DivNA, SEQN_Div0, and SEQN_Div12 for merging.
SEQN_Div_NA_012 <- rbind(SEQN_DivNA, SEQN_Div0, SEQN_Div12)
# Check that this should have the same number of rows as totals does.
identical(length(unique(SEQN_Div_NA_012$SEQN)), nrow(totals))
# Merge DivGroups with the totals.
totals_divgroup <- merge(totals, SEQN_Div_NA_012, all.x=T, by="SEQN")
# Change DivGroup into a factor and specify the factor levels.
totals_divgroup$DivGroup <- factor(totals_divgroup$DivGroup,
levels = c('DivNA', 'Div0', 'Div1', 'Div2') )
# The individuals in totals were grouped into 4 groups depending on their consumption of
# 4xxxxxxx foods (or the lack thereof). The totals_divgroup has DivGroup column.
table(totals_divgroup$DivGroup, useNA = "ifany")
# Save the totals with DivGroup.
write.table(totals_divgroup, "Total_D12_FC_QC_mean_QC_demo_ga_body_meta_DivGroup.txt",
sep="\t", row.names=F, quote=F)
