setwd("~/GitHub/DietR/")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Install the SASxport package if it is not installed yet.
if (!require("SASxport", quietly = TRUE)) install.packages("SASxport")
# Load SASeport, necessary to import NHANES data.
library(SASxport)
# Load necessary functions.
source("lib/specify_data_dir.R")
source("lib/load_clean_NHANES.R")
source("lib/QCOutliers.R")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/NHANES")
# Load the mean total.
meantotal12d <- read.table("Total_D12_FC_QC_mean.txt", sep="\t", header=T)
# Load the demographics file.
demog <- read.xport("Raw_data/DEMO_I.XPT")
# Demographics data has the age, gender, etc. of each participant. Read documentation on demographics
# (https://wwwn.cdc.gov/Nchs/Nhanes/2015-2016/DEMO_I.htm) for details.
head(demog, 1)
# Merge QC-totals and demographics by SEQN.
meantotal12d_demo <- merge(x= meantotal12d, y=demog, by="SEQN", all.x=TRUE)
#####
# Split your dataset to males and females because different thresholds apply for males and females.
meantotal12d_demo_M <- subset(meantotal12d_demo, RIAGENDR==1)
dim(meantotal12d_demo_M)
meantotal12d_demo_F <- subset(meantotal12d_demo, RIAGENDR==2)
dim(meantotal12d_demo_F)
# ---------------------------------------------------------------------------------------------------------------
# QC for males
# Define your totals dataset to be used as input.
QCtotals <- meantotal12d_demo_M
# If you find potential outlier(s) here, click "No", and view those
# total(s) with their other nutrient intake information by running the following;
KCAL_outliers <- subset(QCtotals, KCAL < 650 | KCAL > 5700)
# Sort the rows by KCAL and show only the specified variables.
KCAL_outliers[order(KCAL_outliers$KCAL, decreasing = T),
c('SEQN', 'KCAL', 'GRMS', 'PROT', 'TFAT', 'CARB')]
# Flag if KCAL is <600 or >5700 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "KCAL", min = 650, max = 5700)
# Flag if PROT is <25 or >240 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "PROT", min = 25, max = 240)
# Flag if TFAT is <25 or >230 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "TFAT", min = 25, max = 230)
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "VC", min = 5, max = 400)
# ---------------------------------------------------------------------------------------------------------------
# QC for females
# Define your totals dataset to be used as input.
QCtotals <- meantotal12d_demo_F
# Flag if KCAL is <600 or >4400 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "KCAL", min = 600, max = 4400)
# Flag if PROT is <10 or >180 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "PROT", min = 10, max = 180)
# Flag if TFAT is <15 or >230 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "TFAT", min = 15, max = 185)
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "VC", min = 5, max = 400)
# Flag if VC (Vitamin C) is <5 or >350 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "VC", min = 5, max = 350)
# Name the females totals after QC.
QCed_F <- QCtotals
dim(QCed_F)
dim(QCed_M)
# ---------------------------------------------------------------------------------------------------------------
# QC for males
# Define your totals dataset to be used as input.
QCtotals <- meantotal12d_demo_M
# Flag if KCAL is <600 or >5700 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "KCAL", min = 650, max = 5700)
# Flag if PROT is <25 or >240 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "PROT", min = 25, max = 240)
# Flag if TFAT is <25 or >230 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "TFAT", min = 25, max = 230)
# Flag if VC (Vitamin C) is <5 or >400 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "VC", min = 5, max = 400)
# Name the males totals after QC.
QCed_M <- QCtotals
dim(QCed_M)
# ---------------------------------------------------------------------------------------------------------------
# QC for females
# Define your totals dataset to be used as input.
QCtotals <- meantotal12d_demo_F
# Flag if KCAL is <600 or >4400 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "KCAL", min = 600, max = 4400)
# Flag if PROT is <10 or >180 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "PROT", min = 10, max = 180)
# Flag if TFAT is <15 or >185 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "TFAT", min = 15, max = 185)
# Flag if VC (Vitamin C) is <5 or >350 --> ask remove or not --> if yes, remove those rows
QCOutliers(input.data = QCtotals, target.colname = "VC", min = 5, max = 350)
# Name the females totals after QC.
QCed_F <- QCtotals
dim(QCed_F)
# Combine M and F.
QCtotals_MF <- rbind(QCed_M, QCed_F)
# Save as a .txt file.
write.table(QCtotals_MF, "Total_D12_FC_QC_mean_QC_demo.txt", sep="\t", quote=F, row.names=F)
# Among the individuals in total12d_demo, select only those in QCtotals_MF.
total12d_demo_QCed <- total12d_demo[total12d_demo$SEQN %in% QCtotals_MF$SEQN, ]
# Load the resultant total for each day.
total12d <- read.table("Total_D12_FC_QC_eachday.txt", sep="\t", header=T)
# total12d has the sum of each variable (columns) for each day and participant.
head(total12d, 2)
# Merge total12d and demographics by SEQN.
total12d_demo <- merge(x= total12d, y=demog, by="SEQN", all.x=TRUE)
# Save it as a .txt file.
write.table(total12d_demo, "Total_D12_FC_QC_eachday_demo.txt", sep="\t", quote=F, row.names=F)
# Calculate the mean of the two days of the totals data per participant.
AverageTotalNHANES(total12d = total12d,
first.val= "GRMS",
last.val= "NoOfItems",
outfn= "Total_D12_FC_QC_mean.txt")
# Load the mean total.
meantotal12d <- read.table("Total_D12_FC_QC_mean.txt", sep="\t", header=T)
# In the previous section, we have removed individual(s) that did not pass the QC from mean total data.
# We will remove those individual(s) from the totals (calculated in B-2, before taking means of days),
# so that we will have the same individuals in QC-ed mean_total and total for each day.
head(total12d_demo)
# Among the individuals in total12d_demo, select only those in QCtotals_MF.
total12d_demo_QCed <- total12d_demo[total12d_demo$SEQN %in% QCtotals_MF$SEQN, ]
length(unique(total12d_demo_QCed$SEQN))
# Save as a .txt file. This will be the total for each of the "QC-ed" individuals for each day, if you would
# like to perform clustering analyses with Day 1 and Day 2 separately.
write.table(total12d_demo_QCed, "Total_D12_FC_QC_eachday_demo_QCed.txt", sep="\t", quote=F, row.names=F)
# Among the individuals in food12f_demo (generated in Procedure A), select only those in QCtotals_MF.
food12f_demo_QCed <- food12f_demo[ food12f_demo$SEQN %in% QCtotals_MF$SEQN, ]
# Only select the data of adults (18 years of age or older).
adults <- demog[demog$RIDAGEYR >= 18, ]
# Check the number of adults - should be 5,992.
length(unique(adults$SEQN))
# Load the formatted food data prepared in the previous section.
Food_D1_FC_cc_f <- read.table("Food_D1_FC_cc_f.txt", sep="\t", header=T)
Food_D2_FC_cc_f <- read.table("Food_D2_FC_cc_f.txt", sep="\t", header=T)
# Subset only those with complete data (STZ==1) in Food_D1_FC_cc_f.
food1 <- subset(Food_D1_FC_cc_f, DR1DRSTZ == 1)
# Generate a vector of SEQN in food1, which is a list of participants.
keepnames1 <- unique(food1$SEQN)  # 8326
# Make a table with the number of food items they reported on day 1.
freqtable1 <- as.data.frame(table(food1$SEQN))
# Keep rows with more than 1 food item reported.
freqtable1_m <- freqtable1[freqtable1$Freq > 1, ]
# Change the column name for ID as "SEQN" for clarity.
colnames(freqtable1_m)[1] <- "SEQN"
# Keep the names of those who reported complete data and more than 1 food item per day.
keepnames1_mult <- keepnames1[keepnames1 %in% freqtable1_m$SEQN] # 8324
# Select only adults from keepnames1_mult.
keepnames1_mult_adults <- keepnames1_mult[keepnames1_mult %in% adults$SEQN] # 5266
# Select only the participants whose names are in keepnames1_mult_adults.
food1b <- food1[food1$SEQN %in% keepnames1_mult_adults, ] # 78,442 rows
# Do the same for Day 2. --------------------------------------------------------------------
# Subset only those with complete data (STZ==1).
food2 <- subset(Food_D2_FC_cc_f, DR2DRSTZ == 1)
# Generate a vector of SEQN in food2, which is a list of participants.
keepnames2 <- unique(food2$SEQN)  # 6875
# Make a table with the number of food items they reported on day 2.
freqtable2 <- as.data.frame(table(food2$SEQN))
# Keep rows with more than 1 food item reported.
freqtable2_m <- freqtable2[freqtable2$Freq > 1, ]
# Change the column name for ID as "SEQN" for clarity.
colnames(freqtable2_m)[1] <- "SEQN"
# Keep the names of those who reported complete data and more than 1 food item per day.
keepnames2_mult <- keepnames2[keepnames2 %in% freqtable2_m$SEQN] # 6869
# Select only adults from keepnames2_mult.
keepnames2_mult_adults <- keepnames2_mult[keepnames2_mult %in% adults$SEQN] # 4,401
# Select only the participants whose names are in keepnames2_mult_adults.
food2b <- food2[food2$SEQN %in% keepnames2_mult_adults, ] # 66,690 rows
# Create a vector of SEQN of those that have both day 1 and day 2 data.
food1bnames <- unique(food1b$SEQN)
food2bnames <- unique(food2b$SEQN)
keepnames12 <- food1bnames[food1bnames %in% food2bnames]
# Check the number of participants remained.
length(keepnames12)
food1b$Day <- 1
food2b$Day <- 2
# Copy these datasets to avoid overwriting.
food1e <- food1b
food2e <- food2b
# Remove the prefixes "DR1I", "DR1" from the columnnames.
# The "gsub" function replaces all matches with the specified pattern.
colnames(food1e) <- gsub(colnames(food1e), pattern = "^DR1I", replacement = "")
colnames(food1e) <- gsub(colnames(food1e), pattern = "^DR1",  replacement = "")
colnames(food2e) <- gsub(colnames(food2e), pattern = "^DR2I", replacement = "")
colnames(food2e) <- gsub(colnames(food2e), pattern = "^DR2",  replacement = "")
# Ensure the columns of food1c and food2c match before joining them.
# (returns TRUE if the two are identical)
identical(colnames(food1e), colnames(food2e))
# Combine food1 and food2 as a longtable (add food2 rows after food1 rows).
food12e <- rbind(food1e, food2e)
# Select only the individuals listed in keepnames12.
food12f <- food12e[food12e$SEQN %in% keepnames12, ]
# Add the demographic data to food12f. --> This will further be QCed at the end of Procedure B-4.
food12f_demo <- merge(x=food12f, y=demog, by="SEQN", all.x=T)
food1bb <- food1b
food2bb <- food2b
# Change "FoodAmt" back to "DR1GRMS" to be consistent with the variable names in dayXvariables
names(food1bb)[names(food1bb) == "FoodAmt"] <- "DR1IGRMS"
names(food2bb)[names(food2bb) == "FoodAmt"] <- "DR2IGRMS"
# [NOTE] Create a set of variables to use downstream.
# Refer to the tutorial how to generate NHANES_Food_VarNames_FC_Day1.txt and
# NHANES_Food_VarNames_FC_Day2.txt.
# ---------------------------------------------------------------------------------------------------------------
# Select variables and combine Day 1 and Day 2
# Day 1
# Import the list of variables to be selected in Day 1.
day1variables <- read.table('Food_VarNames/NHANES_Food_VarNames_FC_Day1.txt', header=F)
# Select the variables to pick up from the food data.
var_to_use1 <- names(food1bb) %in% day1variables$V1
# Select only the specified variables.
food1c <- food1bb[, var_to_use1]
# Remove "DR1T", "DR1" from the column names.
colnames(food1c) <- gsub(colnames(food1c), pattern = "^DR1I", replacement = "")
colnames(food1c) <- gsub(colnames(food1c), pattern = "^DR1",  replacement = "")
# Check the column names.
colnames(food1c)
day2variables <- read.table('Food_VarNames/NHANES_Food_VarNames_FC_Day2.txt', header=F)
var_to_use2 <- names(food2bb) %in% day2variables$V1
food2c <- food2bb[, var_to_use2]
colnames(food2c) <- gsub(colnames(food2c), pattern = "^DR2I", replacement = "")
colnames(food2c) <- gsub(colnames(food2c), pattern = "^DR2", replacement = "")
# Make a day variable before combining food1c and food2c.
food1c$Day <- 1
food2c$Day <- 2
# Ensure the columns of food1c and food2c match, before joining them.
identical(colnames(food1c), colnames(food2c))
# If not, create a dataframe that has the column names of both food1c and food2c,
# examine the column names side-by-side.
names_df <- data.frame(matrix(nrow= max(ncol(food1c), ncol(food2c)), ncol=2))
colnames(names_df) <- c("food1c", "food2c")
names_df$food1c <- colnames(food1c)
names_df$food2c <- colnames(food2c)
names_df
# Combine food1 and food2 as a longtable.
food12c <- rbind(food1c, food2c)
# Limit to only the individuals listed in keepnames12.
food12d <- food12c[food12c$SEQN %in% keepnames12, ]
# Add the demographic data to food12f for data overview. This will be QC-ed later at the end of this script.
food12d_demo <- merge(x=food12d, y=demog, by="SEQN", all.x=T)
# Save the combined and QC-ed food items as a .txt file.
# This has nutrient information, food categories, and day variable for each food item reported,
# and shall be used to calculate totals in B-2.
#### THIS WILL BE A VERY LARGE FILE. ####
write.table(food12d_demo, "Food_D12_FC_QC_demo.txt", sep="\t", quote=F, row.names=F)
# Load the QC-ed food items.
food12d_demo <- read.table("Food_D12_FC_QC_demo.txt", sep="\t", header=T)
# Calculate totals for day 1 and day 2, from the first.val argument through the last.val argument,
# and combine the two datasets.
TotalNHANES(food12d= food12d_demo,
first.val= "GRMS",
last.val=  "A_DRINKS",
outfn = "Total_D12_FC_QC_eachday.txt")
total12d <- read.table("Total_D12_FC_QC_eachday.txt", sep="\t", header=T)
# total12d has the sum of each variable (columns) for each day and participant.
head(total12d, 2)
# Merge total12d and demographics by SEQN.
total12d_demo <- merge(x= total12d, y=demog, by="SEQN", all.x=TRUE)
# Save it as a .txt file.
write.table(total12d_demo, "Total_D12_FC_QC_eachday_demo.txt", sep="\t", quote=F, row.names=F)
AverageTotalNHANES(total12d = total12d,
first.val= "GRMS",
last.val= "NoOfItems",
outfn= "Total_D12_FC_QC_mean.txt")
# Load the mean total.
meantotal12d <- read.table("Total_D12_FC_QC_mean.txt", sep="\t", header=T)
# Merge QC-totals and demographics by SEQN.
meantotal12d_demo <- merge(x= meantotal12d, y=demog, by="SEQN", all.x=TRUE)
#####
# Split your dataset to males and females because different thresholds apply for males and females.
meantotal12d_demo_M <- subset(meantotal12d_demo, RIAGENDR==1)
meantotal12d_demo_F <- subset(meantotal12d_demo, RIAGENDR==2)
food12f_demo_QCed[1:4, 1:4]
food12f_demo[1:4, 1:4]
length(unique(food12f_demo$SEQN))
# Among the individuals in food12f_demo (generated in Procedure A), select only those in QCtotals_MF.
food12f_demo_QCed <- food12f_demo[ food12f_demo$SEQN %in% QCtotals_MF$SEQN, ]
length(unique(food12f_demo_QCed$SEQN))
# Save as a .txt file. This will be the items for each of the "QC-ed" individuals for each day, to be
# used for ordination etc.
write.table(food12f_demo_QCed, "Food_D12_FC_QC_demo_QCed.txt", sep="\t", quote=F, row.names=F)
length(unique(food12f_demo_QCed$SEQN))
length(unique(food12f_demo_QCed$SEQN))
