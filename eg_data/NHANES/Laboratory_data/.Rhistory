# BiocManager::install("LDheatmap")
library(data.table)
library(multtest)
# install.packages('gplots')
library(gplots)
library(ggplot2)
library(LDheatmap)
library(genetics)
library(EMMREML)
# library(compiler) #this library is already installed in R
library("scatterplot3d")
# Source code that I got from Jiaobo Wang on 03/11/2021.
source("E:/MSU OneDrive 20210829/Uni/Beans/Expts/04. YBC GWAS WO Ctls/GAPIT.library.R")
source("E:/MSU OneDrive 20210829/Uni/Beans/Expts/04. YBC GWAS WO Ctls/gapit_functions.txt")
# Load ggplot formatting themes
source("~/GitHub/dietary_patterns/lib/ggplot2themes.R")
setwd("E:/MSU OneDrive 20210829/PIC Cassoulet/PIC/GWAS/02_PR2019_DR_DTF/")
myhist <- read.table("PR2019_DR_DTF.txt", sep="\t", header=F)
head(myhist,2)
nrow(myhist)
myG <- read.table("PIC_pl_geno999_PR2019_DR_DTF_het25_mi80_maf3.tassel_f.hmp.txt", head=F)
head(myG, 2)
nrow(myG)
# Change to the GWAS folder and perform GWAS with specified conditions.
setwd("BLINKpc3_tasselformatted/")
# GWAS. SPECIFY MODEL ONE BY ONE!
# When I run BLINK and MLM in one go, the results were exactly the same for unknown reasons.
mygapit <- GAPIT(
Y=myY,
G=myG,
PCA.total = 3,
cutOff = 0.05,
model="BLINK"
)
colnames(myY) = c("Taxa", "DTF")
# Pick up only Geno and the desired phenotype to use.
myY = myhist[, c(1,2)]
head(myY, 2)
# Check the number of individuals.
nrow(myY)
colnames(myY) = c("Taxa", "DTF")
# Ensure your phenotype name is correct! - as this will be used as filename prefix.
head(myY)
# GWAS. SPECIFY MODEL ONE BY ONE!
# When I run BLINK and MLM in one go, the results were exactly the same for unknown reasons.
mygapit <- GAPIT(
Y=myY,
G=myG,
PCA.total = 3,
cutOff = 0.05,
model="BLINK"
)
setwd("E:/MSU OneDrive 20210829/PIC Cassoulet/PIC/GWAS/02_PR2019_DR_DTF/BLINKpc3_tasselformatted/")
myhist <- read.table("PR2019_DR_DTF.txt", sep="\t", header=F)
setwd("E:/MSU OneDrive 20210829/PIC Cassoulet/PIC/GWAS/02_PR2019_DR_DTF/")
myhist <- read.table("PR2019_DR_DTF.txt", sep="\t", header=F)
# Pick up only Geno and the desired phenotype to use.
myY = myhist[, c(1,2)]
head(myY, 2)
# Check the number of individuals.
nrow(myY)
colnames(myY) = c("Taxa", "DTF")
# Ensure your phenotype name is correct! - as this will be used as filename prefix.
head(myY)
myG <- read.table("LD_sw50_5_08/PIC_pl_geno999_PR2019_DR_DTF_het25_mi80_maf3_sw50_5_08.plinktotassel_f.hmp.txt", head=F)
head(myG, 2)
nrow(myG)
# Change to the GWAS folder and perform GWAS with specified conditions.
setwd("LD_sw50_5_08/BLINKpc3")
# GWAS. SPECIFY MODEL ONE BY ONE!
# When I run BLINK and MLM in one go, the results were exactly the same for unknown reasons.
mygapit <- GAPIT(
Y=myY,
G=myG,
PCA.total = 3,
cutOff = 0.05,
model="BLINK"
)
setwd("~/GitHub/dietary_patterns/")
# Food (OTU)
# Load food OTU table - this is our food OTU data
food <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.dhydrt.otu.txt", row.names=1)
# Name your main directory for future use.
main_wd <- file.path(getwd())
# load the necessary packages.
library(phyloseq)
library(ggtree)
library(ggplot2)
library(SASxport)
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("~/GitHub/R_Toolbox/distinct100colors.rda")
# Load the necessary scripts.
source("lib/specify_data_dir.R")
source("lib/unifrac_ordination.R")
source("lib/ggplot2themes.R")
# Set working dir
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/")
# Food (OTU)
# Load food OTU table - this is our food OTU data
food <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.dhydrt.otu.txt", row.names=1)
# Format the food file and create a otu_table called OTU.
PrepFood(data=food)
# Take a look at the food file.
# The column name of "food" is SEQN preceded with an 'X'.
food[1:8, 1:8]
# Taxonomy (tax)
# Load taxonomy file generated by the MakeFoodTree function.
tax <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Metadata (Sample) Add the GLU_index before making phyfoods .............................................................
# Sample
# Load the demographics data.
demog <- read.xport("../Raw_data/DEMO_I.XPT")
# demog needs to have "XSEQN" as rownames in order to be used in PrepMeta function.
# Add 'X' at the beginning.
# demog$Row.names <- paste("X", demog$SEQN, sep="")
# Now the Row.names column has "XSEQN".
head(demog,2)
# Load a dataset that has the "GLU_index" information.
glu <- read.delim( file="QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
# Take out only SEQN and GLU_index.
SEQN_GLU <- glu[, c("SEQN", "GLU_index")]
# Put 'X' in front of the SEQN and define it as a Row.names.
# SEQN_GLU$Row.names <- paste("X", SEQN_GLU$SEQN, sep="")
# Take out one column as a dataframe, not a vector.
head(SEQN_GLU)
dim(SEQN_GLU)
# Add GLU_index to metadata.
demog_glu <- merge(x=SEQN_GLU, y=demog, all.x=TRUE, by="SEQN")
library(naniar)
dim(demog_glu)
colSums(is.na(demog_glu))
# Now, it has GLU_index.
head(demog_glu, 2)
# Put 'X' in front of the SEQN and define it as rownames.
rownames(demog_glu) <- paste("X", demog_glu$SEQN, sep="")
# Prep metadata for generating a phyloseq object.
PrepMeta_NHANES(data= demog_glu)
# Food tree
# Load foodtree file generated by the MakeFoodTree function.
foodtree <- read_tree("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.nwk")
# Format the food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# Make a phyloseq object with OTU, TAX, samples, and foodtree by using the phyloseq function.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
ps <- phyfoods
head(sample_data(ps),2)
# PCA via phyloseq. "RDA" with no restrictions is PCA.
# ord_clr <- phyloseq::ordinate(ps_clr, "RDA")
# PCoA with unifrac distance with the new phyloseq object.
ord_clr <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=TRUE)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_w <- ord_clr$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent_w,
output.fn="Ordination2/Food_D12_FC_cc_f_males50s_red_Lv4_ord_WEIGHTED_eigen_2.txt")
# Plot scree plot
phyloseq::plot_scree(ord_clr) +
geom_bar(stat="identity", fill = "blue") +
labs(x = "\nAxis", y = "Proportion of Variance\n")
# Examine eigenvalues and % prop. variance explained
# head(ord_clr$CA$eig)
head(ord_clr$values$Relative_eig)
# Plot the first two components and scale the plot to
# reflect the relative amount of information explained by each axis
#Scale axes and plot ordination
# clr1 <- ord_clr$CA$eig[1] / sum(ord_clr$CA$eig)
# clr2 <- ord_clr$CA$eig[2] / sum(ord_clr$CA$eig)
phyloseq::plot_ordination(ps, ord_clr, type="samples", color="GLU_index") +
geom_point(size = 2) +
# coord_fixed(clr2 / clr1) +
stat_ellipse(aes(group = GLU_index), linetype = 2)
# Plot the first two components and scale the plot to
# reflect the relative amount of information explained by each axis
#Scale axes and plot ordination
# clr1 <- ord_clr$CA$eig[1] / sum(ord_clr$CA$eig)
# clr2 <- ord_clr$CA$eig[2] / sum(ord_clr$CA$eig)
phyloseq::plot_ordination(ps, ord_clr, type="samples", color="GLU_index") +
geom_point(size = 2) +
# coord_fixed(clr2 / clr1) +
stat_ellipse(aes(group = GLU_index), linetype = 2)
clr_dist_matrix <- phyloseq::distance(ps, method = "wunifrac") # weighted
ps
#ADONIS test
vegan::adonis(clr_dist_matrix ~ phyloseq::sample_data(ps)$GLU_index)
#ADONIS test
vegan::adonis(clr_dist_matrix ~ phyloseq::sample_data(ps)$GLU_index)
#ADONIS test
vegan::adonis(clr_dist_matrix ~ phyloseq::sample_data(ps)$GLU_index)
#ADONIS test
vegan::adonis(clr_dist_matrix ~ phyloseq::sample_data(ps)$GLU_index)
#ADONIS test
vegan::adonis(clr_dist_matrix ~ phyloseq::sample_data(ps)$GLU_index)
# Dispersion test and plot
dispr <- vegan::betadisper(clr_dist_matrix, phyloseq::sample_data(ps)$GLU_index)
dispr
plot(dispr)
# ADONIS test
vegan::adonis(clr_dist_matrix ~ phyloseq::sample_data(ps)$GLU_index)
boxplot(dispr, main = "", xlab = "")
## Permutation test for homogeneity of multivariate dispersion
vegan::permutest(dispr)
# Dispersion test and plot
dispr <- vegan::betadisper(clr_dist_matrix, phyloseq::sample_data(ps)$GLU_index)
dispr
plot(dispr)
## Permutation test for homogeneity of multivariate dispersion
vegan::permutest(dispr)
plot(dispr)
# use dispr to do a permutation test for homogeneity of multivariate dispersion
vegan::permutest(dispr)
# use dispr to do a permutation test for homogeneity of multivariate dispersion
vegan::permutest(dispr)
# use dispr to do a permutation test for homogeneity of multivariate dispersion
vegan::permutest(dispr)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(clr_dist_matrix ~ phyloseq::sample_data(ps)$GLU_index)
# <UNweighted unifrac distance>
# Generate distance matrix
clr_dist_matrix <- phyloseq::distance(ps, method = "unifrac")  # unweighted
# Dispersion test and plot
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr <- vegan::betadisper(clr_dist_matrix, phyloseq::sample_data(ps)$GLU_index)
dispr
# <UNweighted unifrac distance>
# Generate distance matrix
clr_dist_matrix <- phyloseq::distance(ps, method = "unifrac")  # unweighted
# Dispersion test and plot
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr <- vegan::betadisper(clr_dist_matrix, phyloseq::sample_data(ps)$GLU_index)
dispr
# <Weighted unifrac distance>
# Generate distance matrix
clr_dist_matrix <- phyloseq::distance(ps, method = "wunifrac") # weighted
# Dispersion test and plot
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr <- vegan::betadisper(clr_dist_matrix, phyloseq::sample_data(ps)$GLU_index)
dispr
# PCA via phyloseq. "RDA" with no restrictions is PCA.
# ord_clr <- phyloseq::ordinate(ps_clr, "RDA")
# PCoA with unifrac distance with the new phyloseq object.
ord_clr <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=TRUE)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_w <- ord_clr$values$Relative_eig
head(eigen_percent_w)
# Plot the first two components and scale the plot to
# reflect the relative amount of information explained by each axis
#Scale axes and plot ordination
# clr1 <- ord_clr$CA$eig[1] / sum(ord_clr$CA$eig)
# clr2 <- ord_clr$CA$eig[2] / sum(ord_clr$CA$eig)
phyloseq::plot_ordination(ps, ord_clr, type="samples", color="GLU_index") +
geom_point(size = 2) +
# coord_fixed(clr2 / clr1) +
stat_ellipse(aes(group = GLU_index), linetype = 2)
dispr
plot(dispr)
plot(dispr)
boxplot(dispr, main = "", xlab = "")
# <UNweighted unifrac distance>
# Generate distance matrix
clr_dist_matrix <- phyloseq::distance(ps, method = "unifrac")  # unweighted
# Dispersion test and plot
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr <- vegan::betadisper(clr_dist_matrix, phyloseq::sample_data(ps)$GLU_index)
dispr
boxplot(dispr, main = "", xlab = "")
plot(dispr)
# use dispr to do a permutation test for homogeneity of multivariate dispersion
vegan::permutest(dispr)
# use dispr to do a permutation test for homogeneity of multivariate dispersion
vegan::permutest(dispr)
# use dispr to do a permutation test for homogeneity of multivariate dispersion
vegan::permutest(dispr)
# use dispr to do a permutation test for homogeneity of multivariate dispersion
vegan::permutest(dispr)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(clr_dist_matrix ~ phyloseq::sample_data(ps)$GLU_index)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(clr_dist_matrix ~ phyloseq::sample_data(ps)$GLU_index)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(clr_dist_matrix ~ phyloseq::sample_data(ps)$GLU_index)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(clr_dist_matrix ~ phyloseq::sample_data(ps)$GLU_index)
# <UNweighted unifrac distance>
# Generate distance matrix
clr_dist_matrix_u <- phyloseq::distance(ps, method = "unifrac")  # UNweighted
# <UNweighted unifrac distance>
# Generate distance matrix
clr_dist_matrix_u <- phyloseq::distance(ps, method = "unifrac")  # UNweighted
# Dispersion test and plot
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr_u <- vegan::betadisper(clr_dist_matrix_u, phyloseq::sample_data(ps)$GLU_index)
dispr_u
plot(dispr)
boxplot(dispr, main = "", xlab = "")
plot(dispr_u)
boxplot(dispr_u, main = "", xlab = "")
# use dispr to do a permutation test for homogeneity of multivariate dispersion
vegan::permutest(dispr_u)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(clr_dist_matrix_u ~ phyloseq::sample_data(ps)$GLU_index)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(clr_dist_matrix_u ~ phyloseq::sample_data(ps)$GLU_index)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(clr_dist_matrix_u ~ phyloseq::sample_data(ps)$GLU_index)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(clr_dist_matrix_u ~ phyloseq::sample_data(ps)$GLU_index)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(clr_dist_matrix_u ~ phyloseq::sample_data(ps)$GLU_index)
# ---------------------------------------------------------------------------------------------------------------
# For now, how to do permaNoVA...
rm(clr_dist_matrix)
# ---------------------------------------------------------------------------------------------------------------
# For now, how to do permaNoVA...
rm(clr_dist_matrixdispr)
# ---------------------------------------------------------------------------------------------------------------
# For now, how to do permaNoVA...
rm(dispr)
# ---------------------------------------------------------------------------------------------------------------
# For now, how to do permaNoVA...
# <Weighted unifrac distance>
# Generate distance matrix
clr_dist_matrix_w <- phyloseq::distance(ps, method = "wunifrac") # weighted
# Dispersion test and plot
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr_w <- vegan::betadisper(clr_dist_matrix_w, phyloseq::sample_data(ps)$GLU_index)
dispr_w
plot(dispr_w)
boxplot(dispr_w, main = "", xlab = "")
# use dispr to do a permutation test for homogeneity of multivariate dispersion
vegan::permutest(dispr_w)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(clr_dist_matrix_w ~ phyloseq::sample_data(ps)$GLU_index)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(clr_dist_matrix_w ~ phyloseq::sample_data(ps)$GLU_index)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(clr_dist_matrix_w ~ phyloseq::sample_data(ps)$GLU_index)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(clr_dist_matrix_w ~ phyloseq::sample_data(ps)$GLU_index)
