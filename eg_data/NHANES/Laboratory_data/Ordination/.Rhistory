# SEQN_GLU$Row.names <- paste("X", SEQN_GLU$SEQN, sep="")
# Take out one column as a dataframe, not a vector.
head(SEQN_GLU)
dim(SEQN_GLU)
# Add GLU_index to metadata.
demog_glu <- merge(x=SEQN_GLU, y=demog, all.x=TRUE, by="SEQN")
# Now, it has GLU_index.
head(demog_glu, 2)
# Put 'X' in front of the SEQN and define it as rownames.
rownames(demog_glu) <- paste("X", demog_glu$SEQN, sep="")
# Prep metadata for generating a phyloseq object.
PrepMeta_NHANES(data= demog_glu)
# Food tree
# Load foodtree file generated by the MakeFoodTree function.
foodtree <- read_tree("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.nwk")
# Format the food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree by using the phyloseq function.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show only the columns (variables) of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s <- tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Change to the folder called "Ordination" in your "Ordination" folder.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/Ordination/")
# Perform Principal Coordinate Analysis (PCoA) with WEIGHTED unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) could take a few minutes.
ordinated_w <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=TRUE)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_w <- ordinated_w$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent_w,
output.fn="Food_D12_FC_cc_f_males50s_red_Lv4_ord_WEIGHTED_eigen.txt")
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_w, number.of.axes= 10, meta.data= demog_glu,
output.fn= "Food_D12_FC_cc_f_males50s_red_Lv4_ord_WEIGHTED_meta_users.txt")
# ---------------------------------------------------------------------------------------------------------------
# Load the XXX_meta_users_glu.txt again for plotting.
loaded_glu_w <- read.table("Food_D12_FC_cc_f_males50s_red_Lv4_ord_WEIGHTED_meta_users.txt",
sep="\t", header=T)
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_w$GLU_index <- factor(loaded_glu_w$GLU_index, labels= c("Normal", "Prediabetic", "Diabetic"))
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata.
p1_w <- ggplot(loaded_glu_w, aes(x=Axis.1, y=Axis.2, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("turquoise2", "goldenrod3", "mediumvioletred")) +
xlab( paste("Axis.1 (", paste(round(eigen_percent_w[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent_w[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_w
# Save p1 as a PDF.
ggsave("Food_D12_FC_cc_f_males50s_red_Lv4_ord_WEIGHTED_Axis12_p1.pdf",
p1_w, device="pdf", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_w <- p1_w + stat_ellipse(level=0.95)
ellipses_w
# Save ellipses as a PDF.
ggsave("Food_D12_FC_cc_f_males50s_red_Lv4_ord_WEIGHTED_Axis12_ellipses.pdf",
ellipses_w, device="pdf", width=7, height=5.5, unit="in", dpi=300)
# Generate distance matrix
dist_matrix_w <- phyloseq::distance(phyfoods, method = "wunifrac") # weighted
# Dispersion test and plot
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr_w <- vegan::betadisper(d=dist_matrix_w, phyloseq::sample_data(phyfoods)$GLU_index)
# Can show the centroids and dispersion of each group.
plot(dispr_w)
# Or show the distance to centroid of each datapoint
boxplot(dispr_w, xlab = "")
# Can show the centroids and dispersion of each group.
plot(dispr_w)
# Or show the distance to centroid of each datapoint
boxplot(dispr_w, xlab = "")
# Use dispr to do a permutation test for homogeneity of multivariate dispersion
vegan::permutest(dispr_w)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_w ~ phyloseq::sample_data(phyfoods)$GLU_index)
# Perform Principal Coordinate Analysis (PCoA) with UNweighted unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) takes ~ 1 min.
ordinated_u <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=FALSE)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_u <- ordinated_u$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent_u,
output.fn="Food_D12_FC_cc_f_males50s_red_Lv4_ord_UNweighted_eigen.txt")
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_u, number.of.axes= 10, meta.data= demog_glu,
output.fn= "Food_D12_FC_cc_f_males50s_red_Lv4_ord_UNweighted_meta_users.txt")
# Load the XXX_meta_users_glu.txt again for plotting.
loaded_glu_u <- read.table("Food_D12_FC_cc_f_males50s_red_Lv4_ord_UNweighted_meta_users.txt",
sep="\t", header=T)
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_u$GLU_index <- factor(loaded_glu_u$GLU_index, labels= c("Normal", "Prediabetic", "Diabetic"))
# Take a look at meta_usersdf_loaded.
head(loaded_glu_u, 2)
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata.
p1_u <- ggplot(loaded_glu_u, aes(x=Axis.1, y=Axis.2, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("turquoise2", "goldenrod3", "mediumvioletred") ) +
xlab( paste("Axis.1 (", paste(round(eigen_percent_u[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent_u[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_u
# Save p1 as a PDF.
ggsave("Food_D12_FC_cc_f_males50s_red_Lv4_ord_UNweighted_Axis12_p1.pdf",
p1_u, device="pdf", width=7, height=5.5, unit="in", dpi=300)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
ellipses_u
# Save ellipses as a PDF.
ggsave("Food_D12_FC_cc_f_males50s_red_Lv4_ord_UNweighted_Axis12_ellipses.pdf",
ellipses_u, device="pdf", width=7, height=5.5, unit="in", dpi=300)
# Save ellipses as a PDF.
ggsave("Food_D12_FC_cc_f_males50s_red_Lv4_ord_UNweighted_Axis12_ellipses.pdf",
ellipses_u, device="pdf", width=7, height=5.5, unit="in", dpi=300)
# Generate distance matrix
dist_matrix_u <- phyloseq::distance(phyfoods, method="unifrac")  # UNweighted
# Dispersion test and plot
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr_u <- vegan::betadisper(dist_matrix_u, phyloseq::sample_data(phyfoods)$GLU_index)
# Can show the centroids and dispersion of each group.
plot(dispr_u)
# Or show the distance to centroid of each datapoint
boxplot(dispr_u, xlab = "")
# Or show the distance to centroid of each datapoint
boxplot(dispr_u) #, xlab = "")
# Or show the distance to centroid of each datapoint
boxplot(dispr_u, xlab = "")
# Use dispr to do a permutation test for homogeneity of multivariate dispersion.
vegan::permutest(dispr_u)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index)
# Use adonis to test whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(dist_matrix_u ~ phyloseq::sample_data(phyfoods)$GLU_index)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.80)
ellipses_u
# Use dispr to do a permutation test for homogeneity of multivariate dispersion.
vegan::permutest(dispr_u)
# Dispersion test and plot
# vegan::betadisper computes centeroids and distance of each datapoint from it.
dispr_u <- vegan::betadisper(dist_matrix_u, phyloseq::sample_data(phyfoods)$GLU_index)
# You can add ellipses at a desired confidence level; but with this
# example data, there are too few samples per user to draw them.
ellipses_u <- p1_u + stat_ellipse(level=0.95)
ellipses_u
# Now, it has GLU_index.
head(demog_glu, 2)
# Food
# Load food OTU table - this is our food OTU data
food <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.dhydrt.otu.txt", row.names=1)
# Format the food file and create a otu_table called OTU.
PrepFood(data=food)
# Take a look at the food file.
# The column name of "food" is SEQN preceded with an 'X'.
food[1:8, 1:8]
# Taxonomy (tax)
# Load taxonomy file generated by the MakeFoodTree function.
tax <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Set working dir
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/")
# Sample
# Load the demographics data.
demog <- read.xport("../Raw_data/DEMO_I.XPT")
# Load a dataset that has the "GLU_index" information.
glu <- read.delim( file="QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
# Take out only the SEQN and GLU_index.
SEQN_GLU <- glu[, c("SEQN", "GLU_index")]
# Add GLU_index to metadata.
demog_glu <- merge(x=SEQN_GLU, y=demog, all.x=TRUE, by="SEQN")
# Now, it has GLU_index.
head(demog_glu, 2)
# Now, it has GLU_index.
head(demog_glu, 2)
# Now, it has GLU_index.
head(demog_glu, 2)
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree by using the phyloseq function.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns (variables) of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s <- tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Change to the folder called "Ordination" in your "Ordination" folder.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/Ordination/")
# Perform Principal Coordinate Analysis (PCoA) with WEIGHTED unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) could take a few minutes.
ordinated_w <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=TRUE)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_w <- ordinated_w$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent_w,
output.fn="Food_D12_FC_cc_f_males50s_red_Lv4_ord_WEIGHTED_eigen.txt")
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_w, number.of.axes= 10, meta.data= demog_glu,
output.fn= "Food_D12_FC_cc_f_males50s_red_Lv4_ord_WEIGHTED_meta_users.txt")
# Load the output again for plotting.
loaded_glu_w <- read.table("Food_D12_FC_cc_f_males50s_red_Lv4_ord_WEIGHTED_meta_users.txt",
sep="\t", header=T)
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_w$GLU_index <- factor(loaded_glu_w$GLU_index, labels= c("Normal", "Prediabetic", "Diabetic"))
# Load the output again for plotting.
loaded_glu_w <- read.table("Food_D12_FC_cc_f_males50s_red_Lv4_ord_WEIGHTED_meta_users.txt",
sep="\t", header=T)
loaded_glu_w$GLU_index
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_w, number.of.axes= 10, meta.data= demog_glu,
output.fn= "Food_D12_FC_cc_f_males50s_red_Lv4_ord_WEIGHTED_meta_users.txt")
# Set working dir
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/")
# Food
# Load food OTU table - this is our food OTU data
food <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.dhydrt.otu.txt", row.names=1)
# Format the food file and create a otu_table called OTU.
PrepFood(data=food)
# Take a look at the food file.
# The column name of "food" is SEQN preceded with an 'X'.
food[1:8, 1:8]
# Taxonomy (tax)
# Load taxonomy file generated by the MakeFoodTree function.
tax <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Sample
# Load the demographics data.
demog <- read.xport("../Raw_data/DEMO_I.XPT")
# Load a dataset that has the "GLU_index" information.
glu <- read.delim( file="QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
# Take out only the SEQN and GLU_index.
SEQN_GLU <- glu[, c("SEQN", "GLU_index")]
# Add GLU_index to metadata.
demog_glu <- merge(x=SEQN_GLU, y=demog, all.x=TRUE, by="SEQN")
# Now, it has GLU_index.
head(demog_glu, 2)
# Put 'X' in front of the SEQN and define it as rownames.
rownames(demog_glu) <- paste("X", demog_glu$SEQN, sep="")
# Prep metadata for generating a phyloseq object.
PrepMeta_NHANES(data= demog_glu)
# Food tree
# Load foodtree file generated by the MakeFoodTree function.
foodtree <- read_tree("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.nwk")
# Format the food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree by using the phyloseq function.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns (variables) of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s <- tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Change to the folder called "Ordination" in your "Ordination" folder.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/Ordination/")
# Perform Principal Coordinate Analysis (PCoA) with WEIGHTED unifrac distance of your food data.
# This may take a few minutes depending on your data size.
# e.g. a large phyloseq object (7.9 MB) could take a few minutes.
ordinated_w <- phyloseq::ordinate(phyfoods, method="PCoA", distance="unifrac", weighted=TRUE)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_w <- ordinated_w$values$Relative_eig
# Save the percent variance explained as a txt file.
Eigen(eigen.input = eigen_percent_w,
output.fn="Food_D12_FC_cc_f_males50s_red_Lv4_ord_WEIGHTED_eigen.txt")
# Merge the first n axes to the metadata and save it as a txt file.
# The merged dataframe, 'meta_usersdf', will be used for plotting.
MergeAxesAndMetadata_NHANES(ord.object= ordinated_w, number.of.axes= 10, meta.data= demog_glu,
output.fn= "Food_D12_FC_cc_f_males50s_red_Lv4_ord_WEIGHTED_meta_users.txt")
demog_glu
# Load the output again for plotting.
loaded_glu_w <- read.table("Food_D12_FC_cc_f_males50s_red_Lv4_ord_WEIGHTED_meta_users.txt",
sep="\t", header=T)
loaded_glu_w$GLU_index
# Convert the GLU_index as a factor to plot it in order.
loaded_glu_w$GLU_index <- factor(loaded_glu_w$GLU_index, labels= c("Normal", "Prediabetic", "Diabetic"))
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 1 and Axis 2 to show the separation of samples colored by UserName, gender, timing, etc. as in the metadata.
p1_w <- ggplot(loaded_glu_w, aes(x=Axis.1, y=Axis.2, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("turquoise2", "goldenrod3", "mediumvioletred")) +
xlab( paste("Axis.1 (", paste(round(eigen_percent_w[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent_w[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_w
# ---------------------------------------------------------------------------------------------------------------
# Plot Axis 1 and Axis 2 to show the separation of samples colored by Groups as in the metadata.
p1_w <- ggplot(loaded_glu_w, aes(x=Axis.1, y=Axis.2, color=GLU_index)) +
geom_point(aes(color= GLU_index), size=3) +
scale_color_manual( values= c("turquoise2", "goldenrod3", "mediumvioletred")) +
xlab( paste("Axis.1 (", paste(round(eigen_percent_w[1]*100, 1)), "%)", sep="") ) +
ylab( paste("Axis.2 (", paste(round(eigen_percent_w[2]*100, 1)), "%)", sep="") ) +
no_grid + space_axes + theme(aspect.ratio = 1)
p1_w
setwd("~/GitHub/dietary_patterns/")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# load the necessary packages.
library(phyloseq)
library(ggtree)
library(ggplot2)
library(SASxport)
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("~/GitHub/R_Toolbox/distinct100colors.rda")
# Load the necessary scripts.
source("lib/specify_data_dir.R")
source("lib/unifrac_ordination.R")
source("lib/ggplot2themes.R")
# Set working dir
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/")
# ---------------------------------------------------------------------------------------------------------------
# Food (OTU)
# Load food OTU table - this is our food OTU data
food <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.dhydrt.otu.txt", row.names=1)
# Format the food file and create a otu_table called OTU.
PrepFood(data=food)
# Take a look at the food file.
# The column name of "food" is SEQN preceded with an 'X'.
food[1:8, 1:8]
# Taxonomy (tax)
# Load taxonomy file generated by the MakeFoodTree function.
tax <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Metadata (Sample) Add the GLU_index before making phyfoods
# Sample
# Load the demographics data.
demog <- read.xport("../Raw_data/DEMO_I.XPT")
head(demog,2)
# Load a dataset that has the "GLU_index" information.
glu <- read.delim( file="QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
# Take out only SEQN and GLU_index.
SEQN_GLU <- glu[, c("SEQN", "GLU_index")]
head(SEQN_GLU)
dim(SEQN_GLU)
# Put 'X' in front of the SEQN and define it as rownames.
rownames(demog_glu) <- paste("X", demog_glu$SEQN, sep="")
# Prep metadata for generating a phyloseq object.
PrepMeta_NHANES(data= demog_glu)
# Food tree
# Load foodtree file generated by the MakeFoodTree function.
foodtree <- read_tree("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.nwk")
# Format the food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# Make a phyloseq object with OTU, TAX, samples, and foodtree by using the phyloseq function.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
setwd("~/GitHub/dietary_patterns")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# load the necessary packages.
library(phyloseq)
library(ggtree)
library(ggplot2)
library(SASxport)
# Load the distinct 100 colors for use.
distinct100colors <- readRDS("~/GitHub/R_Toolbox/distinct100colors.rda")
# Load the necessary scripts.
source("lib/specify_data_dir.R")
source("lib/unifrac_ordination.R")
source("lib/ggplot2themes.R")
# Set working dir
SpecifyDataDirectory("eg_data/NHANES/Laboratory_data/")
# Food
# Load food OTU table - this is our food OTU data
food <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.dhydrt.otu.txt", row.names=1)
# Format the food file and create a otu_table called OTU.
PrepFood(data=food)
# Take a look at the food file.
# The column name of "food" is SEQN preceded with an 'X'.
food[1:8, 1:8]
# Taxonomy (tax)
# Load taxonomy file generated by the MakeFoodTree function.
tax <- read.delim("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.taxonomy.txt")
# Format the tax file and create a taxonomy table called TAX.
PrepTax(data=tax)
# Sample
# Load the demographics data.
demog <- read.xport("../Raw_data/DEMO_I.XPT")
# Load a dataset that has the "GLU_index" information.
glu <- read.delim( file="QCtotal_d_glu_body_meta.txt", sep= "\t", header= T )
# Take out only the SEQN and GLU_index.
SEQN_GLU <- glu[, c("SEQN", "GLU_index")]
# Add GLU_index to metadata.
demog_glu <- merge(x=SEQN_GLU, y=demog, all.x=TRUE, by="SEQN")
# Now, it has GLU_index.
head(demog_glu, 2)
# Put 'X' in front of the SEQN and define it as rownames.
rownames(demog_glu) <- paste("X", demog_glu$SEQN, sep="")
# Prep metadata for generating a phyloseq object.
PrepMeta_NHANES(data= demog_glu)
# Food tree
# Load foodtree file generated by the MakeFoodTree function.
foodtree <- read_tree("Foodtree/Food_D12_FC_cc_f_males50s_red_Lv4.nwk")
# Format the food tree and save it as 'TREE'.
PrepTree(data=foodtree)
# ---------------------------------------------------------------------------------------------------------------
# Make a phyloseq object with OTU, TAX, samples, and foodtree by using the phyloseq function.
phyfoods <- phyloseq(OTU, TAX, SAMPLES, TREE)
# Check your metadata
# Show the sample names. Change n to adjust the number of rows to show.
head(sample_names(phyfoods), n=6)
# Show metadata.
head(sample_data(phyfoods), n=2)
# Show only the columns (variables) of metadata.
sample_variables(phyfoods)
# Check the level 1 foods in your food tree
L1s <- tax_table(phyfoods)[, "L1"]
as.vector(unique(L1s))
# Change to the folder called "Ordination" in your "Ordination" folder.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/Laboratory_data/Ordination/")
SpecifyDataDirectory(directory.name = "~/GitHub/R_Toolbox/Beta-diversity/PCA/")
# PCA via phyloseq. "RDA" with no restrictions is PCA.
nh_pca <- phyloseq::ordinate(phyfoods, "RDA")
# PCA via phyloseq. "RDA" with no restrictions is PCA.
nh_rda <- phyloseq::ordinate(phyfoods, "RDA")
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_rda <- ord_clr$values$Relative_eig
head(eigen_percent_rda)
# Save the percent variance explained by the axes as a vector to use in plots.
eigen_percent_rda <- nh_rda$values$Relative_eig
head(eigen_percent_rda)
# PCA via phyloseq. "RDA" with no restrictions is PCA.
nh_rda <- phyloseq::ordinate(phyfoods, "RDA")
nh_rda
# Plot a scree plot
phyloseq::plot_scree(nh_rda) +
geom_bar(stat="identity", fill = "blue") +
labs(x = "\nAxis", y = "Proportion of Variance\n")
#
head(nh_rda$values$Relative_eig)
#
phyloseq::plot_ordination(phyfoods, nh_rda, type="samples", color="GLU_index") +
geom_point(size = 2)
#
phyloseq::plot_ordination(phyfoods, nh_rda, type="samples", color="GLU_index") +
geom_point(size = 2)
#
phyloseq::plot_ordination(phyfoods, nh_rda, type="samples", color="GLU_index") +
geom_point(size = 2) +
stat_ellipse(aes(group = GLU_index), linetype = 2)
# generate a distance matrix
nh_rda_dist <- phyloseq::distance(phyfoods, method = "RDA")
# generate a distance matrix
nh_rda_dist <- phyloseq::distance(phyfoods, method = "euclidean")
phyloseq::sample_data(phyfoods)$GLU_index
# Dispersion test and plot
# vegan::betadisper computes centeroids and distance of each datapoint from it.
rda_dispr <- vegan::betadisper(nh_rda_dist, phyloseq::sample_data(phyfoods)$GLU_index)
rda_dispr
anova(rda_dispr)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(nh_rda_dist ~ phyloseq::sample_data(phyfoods)$GLU_index)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(nh_rda_dist ~ phyloseq::sample_data(phyfoods)$GLU_index)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(nh_rda_dist ~ phyloseq::sample_data(phyfoods)$GLU_index)
# ADONIS tests whether there is a difference between groups' composition.
# i.e., composition among groups (food they consumed) is similar or not.
vegan::adonis(nh_rda_dist ~ phyloseq::sample_data(phyfoods)$GLU_index)
