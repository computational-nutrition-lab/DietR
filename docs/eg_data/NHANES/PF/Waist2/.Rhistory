setwd("~/GitHub/DietR")
# Name your main directory for future use.
main_wd <- file.path(getwd())
library(SASxport)
library(dplyr)
source("lib/specify_data_dir.R")
source("lib/ggplot2themes.R")
# source("lib/data_overview.R")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/PF/Waist2/")
# ---------------------------------------------------------------------------------------------------------------
# Read data
df <- read.delim("Total_D12_FC_QC_mean_QC_demo_ga_body_meta_n3676_DivGroup_DemoCat.txt")
dim(df)
# Make DivGroup as a factor.
df$DivGroup <- factor(df$DivGroup,
levels = c('DivNA', 'Div0', 'Div1', 'Div2'))
tail(colnames(df))
# Chi-square test for DivGroup and categorical variable levels...
table(df$age_3)
# Gender
chisq.test(df$RIAGENDR, df$DivGroup)
# Age group
chisq.test(df$age_3, df$DivGroup)
# Ethnicity group
chisq.test(df$eth_5, df$DivGroup)
# FIPL group
chisq.test(df$FIPL, df$DivGroup)
# edu group
chisq.test(df$edu, df$DivGroup)
# P-trend
subsetted <- subset(df, age_3== "18-39")
table(subsetted$age_3)
table(subsetted$age_3, subsetted$DivGroup)
subsetted[1:10, c('age_3', 'DivGroup')]
# p-difference
# e.g. Within DivNA, the proportion of ethnicity is different or not?
subsetted <- subset(df, eth_5 == "1or2")
table(subsetted$DivGroup)
table(subsetted$eth_5, subsetted$DivGroup)
# Set your working directory to the main directory.
# Session --> Set working directory --> Choose directory.
setwd("~/GitHub/DietR")
# Name your main directory for future use.
main_wd <- file.path(getwd())
library(vegan)
source("lib/specify_data_dir.R")
source("lib/diversity_nth_tile.R")
# Load source scripts to build foodtrees and OTU tables.
source("lib/specify_data_dir.R")
source("lib/Food_tree_scripts/newick.tree.r")
source("lib/Food_tree_scripts/make.food.tree.r")
source("lib/Food_tree_scripts/make.food.otu.r")
source("lib/Food_tree_scripts/make.fiber.otu.r")
source("lib/Food_tree_scripts/make.dhydrt.otu.r")
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/PF/Waist2")
totals <- read.delim("Total_D12_FC_QC_mean_QC_demo_ga_body_meta_n3677.txt")
# This should have 3,677 people.
nrow(totals)
# Load the food items data where QC-ed individuals were removed based on their totals data.
food <- read.delim("../../Food_D12_FC_QC_demo_QCed.txt", sep= "\t", header=T)
# Count the number of unique SEQNs. There should be 4207 people.
length(unique(food$SEQN))
# So need to only keep the individuals that are in totals (n=3677).
food2<- food[ food$SEQN %in% totals$SEQN, ]
# Should be 3677 SEQNs in food2.
length(unique(food2$SEQN))
# Here, we are interested in food items with their foodcode tarting from 4; nuts/seeds/legumes.
# Select only the rows that contain those food items.
food4s <- subset(food2, Food_code > 39999999 & Food_code < 50000000)
# Check that the subsetted data only contains 4xxxxxxxs.
summary(food4s$Food_code)
# Check the summary of the subset data.
paste(length(unique(food4s$SEQN)), "people consumed",
nrow(food4s), "food items with duplicates.",
"There are", length(unique(food4s$Food_code)), "unique food items.")
# Set your working directory to the main directory.
# Session --> Set working directory --> Choose directory.
setwd("~/GitHub/DietR")
source("lib/specify_data_dir.R")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/NHANESPF/Waist2")
# Set your working directory to the main directory.
# Session --> Set working directory --> Choose directory.
setwd("~/GitHub/DietR")
source("lib/specify_data_dir.R")
# Name your main directory for future use.
main_wd <- file.path(getwd())
# Specify the directory where the data is.
SpecifyDataDirectory(directory.name = "eg_data/NHANES/PF/Waist2")
otu <- read.delim("~/GitHub/DietR/eg_data/NHANES/PF/Waist2/Foodtree/Food_D12_FC_QC_demo_QCed_n3677_4s_3Lv.food.otu.txt")
dim(otu) # 237 x 1839
otu[, c('X83767','X.FOODID')]  # 11 + 2.92 = 13.92 g. Has both Day 1 and Day 2.
otu[, c('X92254','X.FOODID')]  # 3004.38  + 47.25 = 3051.63 g.
# Calculate the sum of 4xxxxxxx foods for each SEQN. This is the sum of two days.
head(colnames(otu)) # X.FOODID, X87496, X88725, ...
tail(colnames(otu)) # X92316, ..., taxonomy.
otu[1:4, 1:4]
# exclude the food description and taxonomy columns.
colsum <- colSums(otu[, 2: (ncol(otu)-1) ] , na.rm=T)
head(colsum) # This is a named vector.
# Create a dataframe with SEQN and amount (2 days).
colsumdf <- data.frame(SEQN=names(colsum), amt = colsum)
row.names(colsumdf) <- NULL
head(colsumdf)
# Safety check.
colsumdf %>% filter(SEQN=="X83767") # 13.92. Correct!
colsumdf %>% filter(SEQN=="X92254") # 3051.63. Correct! But this person seems to be an outlier...
# Divide the amount by 2 to get the average/day for each SEQN.
colsum_s <- colsumdf[order(colsumdf$amt, decreasing=T), ]
colsum_s$amt_ave <- colsum_s$amt/2 # divide by 2 and it will be average amount (g)/ day.
head(colsum_s)
colnames(colsum_s)[1] <- "XSEQN" # Change SEQN to XSEQN.
# Safety check.
colsum_s %>% filter(amt==0) %>% nrow() # all of the people have some consumption, OK!
# Look for outliers.
colsum_s %>% filter(amt== max(colsum_s$amt)) # The max is 1525 g/day.. by X92254.
# What did X92254 report eating?
otu[, c('X92254','X.FOODID')]
# 3004.38 g Bean soup with macaroni home recipe canned or ready to serve
# 47.25 g of Almonds unsalted
# Wow...
# Was it consumed on both days or just on 1 day?
# Load food data.
food <- read.delim("../../Food_D12_FC_QC_demo_QCed.txt", sep= "\t", header=T)
# Take out X92254.
subsetted <- subset(food, SEQN=="92254")
subsetted[ order(subsetted$FoodAmt, decreasing = T),  c("Day", "FoodAmt", "Main.food.description")]
# 35 g salted almonds only on day 1, and 12 g of salted almonds and 1502 g of bean soup for lunch and
# exactly the same 1502 g of bean soup for dinner on day 2. hmm...
# Even though it's soup, 1.5 kg for 1 meal is extreme. I will exclude this..
# Filter out "X92254" who ate 3 kg of nuts/seeds/legumes over 2 days.
colsum_s_2 <- colsum_s %>% filter(amt_ave < 1000)
max(colsum_s_2$amt_ave)
# So, the max amount is 952 g per day.
hist(colsum_s_2$amt_ave)
boxplot(colsum_s_2$amt_ave)
summary(colsum_s_2$amt_ave)
plot(colsum_s_2$amt_ave)
head(colsum_s_2)
# Define the col number.
coln <- which(colnames(otu) == "X92254")
# Exclude the column.
otu2 <- otu[, -coln]
otu2$X92254 # NULL.
hist(colsum_s_2$amt_ave)
boxplot(colsum_s_2$amt_ave)
summary(colsum_s_2$amt_ave)
plot(colsum_s_2$amt_ave)
length(unique(otu2$SEQN))
####
# Check the summary of the subset data again.
otu2[1:4, 1:4]
colsum_s_2
colsum_s_2[1:4, 1:4]
colsum_s_2[1:4, 1:3]
# Calculate the sum of 4xxxxxxx foods for each SEQN. This is the sum of two days.
head(colnames(otu)) # X.FOODID, X87496, X88725, ...
tail(colnames(otu)) # X92316, ..., taxonomy.
otu[1:4, 1:4]
# exclude the food description and taxonomy columns.
colsum <- colSums(otu[, 2: (ncol(otu)-1) ] , na.rm=T)
head(colsum) # This is a named vector.
min(colsum)
length(colsum)  # 1837 items
head(colsumdf)
unique(colsumdf$SEQN)
length(unique(colsumdf$SEQN))
####
# Check the summary of the subset data again.
otu2[1:4, 1:4]
subsetted[ order(subsetted$FoodAmt, decreasing = T),  c("Day", "FoodAmt", "Main.food.description")]
max(colsum_s_2$amt_ave)
head(colsum_s_2)
# Define the col number.
coln <- which(colnames(otu) == "X92254")
coln
####
# Check the summary of the subset data again.
otu2[1:4, 1:4]
ncol(otu2)-1
nrow(otu2)
otu2[nrow(otu2), ncol(otu2)]
####
# Check the summary of the subset data again.
otu2[1:4, 1:4]
colsum_s_2[1:4, 1:3]
(ncol(otu2)-2)
colsum_s_2[1:4, 1:3]
length(uniqeu(colsum_s_2))
length(unique(colsum_s_2))
length(unique(colsum_s_2$XSEQN))
(ncol(otu2)-2)
####
# Check the summary of the subset data again.
otu2[1:4, 1:4]
otu2[nrow(otu2), ncol(otu2)] # the last column is taxonomy!
otu2[nrow(otu2), c( (ncol(otu2)-1), ncol(otu2) )] # the last column is taxonomy!
paste( (ncol(otu2)-2) , "people consumed",
# nrow(otu2), "food items with duplicates.",
"There are", length(unique(otu2$X.FOODID)), "unique food items.")
subsetted[ order(subsetted$FoodAmt, decreasing = T),  c("Day", "FoodAmt", "Main.food.description")]
# From this subsetted food data (i.e. without the outlier individual), count the number of foods.
length(unique(subsetted$Food_code))
# Exclude this outlier individual from the food data, and count the number of foods.
food_woOutlier <- subset(food, SEQN !="92254")
length(unique(food_woOutlier$Food_code))
length(unique(food_woOutlier$Main.food.description))
food_woOutlier4s <- subset(food_woOutlier, Food_code > 39999999 & Food_code < 50000000)
length(unique(food_woOutlier2$Food_code))
length(unique(food_woOutlier4s$Food_code))
length(unique(food_woOutlier4s$Main.food.description))
# Read in the food data with 4s only. n3677, which means the outlier IS included, and needs to be removed.
food4s <- read.delim("Food_D12_FC_QC_demo_QCed_n3677_4s.txt")
# Exclude this outlier individual from the food data, and count the number of foods.
food4s_woOutlier <- subset(food4s, SEQN !="92254")
length(unique(food4s_woOutlier$Food_code))
length(unique(food4s_woOutlier$Main.food.description))
food4s_woOutlier[1:4, 1:3]
# Count how many foods were reported by n=3676 (without the outlier) incluing duplicates?
tail(food4s_woOutlier)
# Count how many foods were reported by n=3676 (without the outlier) incluing duplicates?
tail(food4s_woOutlier,1)
# Count how many foods were reported by n=3676 (without the outlier) including duplicates?
food4s_woOutlier[1:4, 1:3]
# Count how many foods were reported by n=3676 (without the outlier) including duplicates?
nrow(food4s_woOutlier)
# Count how many foods were reported by n=3676 (without the outlier) including duplicates?
length(food4s_woOutlier$Food_code)
